Index: SymPyLearn/2.1.ipynb
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\n \"cells\": [\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {\n    \"id\": \"eD2EhUUx5TNH\"\n   },\n   \"source\": [\n    \"## Свойства коэффициентов квадратичной функции. Практика\\n\",\n    \"\\n\",\n    \"В качестве практики подберите, варьируя коэффициенты, квадратичную функцию для набора точек. Другими словами, вам нужно решить задачу интерполяции полиномом второй степени. Ниже вы найдете код, который создает ползунки, с помощью которых можно варьировать коэффициенты a, b и c, подбирая нужный вид параболы, а также рисует набор точек. <br><br>\\n\",\n    \"Программа будет печатать над графиком актуальный вид функции и сама скажет вам, когда вы достигнете цели. \\n\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 2,\n   \"metadata\": {\n    \"id\": \"6jTnfZNO8EIx\"\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"%matplotlib inline\\n\",\n    \"from ipywidgets import interactive\\n\",\n    \"import matplotlib.pyplot as plt\\n\",\n    \"import numpy as np\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 3,\n   \"metadata\": {\n    \"id\": \"vR8eUwC88EJC\"\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"def get_polyfunc_title(koefs):\\n\",\n    \"    s_koefs = ''.join([f'+{koefs[i]}x^{len(koefs)-i-1}' if koefs[i]>0 \\n\",\n    \"                       else f'{koefs[i]}x^{len(koefs)-i-1}' if koefs[i]<0 \\n\",\n    \"                       else ''\\n\",\n    \"                       for i in range(len(koefs))])\\n\",\n    \"    expr = s_koefs.replace('x^0', '') \\\\\\n\",\n    \"                  .replace('+', ' + ') \\\\\\n\",\n    \"                  .replace('-', ' - ') \\\\\\n\",\n    \"                  .replace('x^1', 'x') \\\\\\n\",\n    \"                  .replace(' 1x', ' x')\\n\",\n    \"\\n\",\n    \"    if expr[:3]==' + ':\\n\",\n    \"        expr = expr[3:]\\n\",\n    \"    if expr:\\n\",\n    \"        return '$f(x) = ' + expr + '$'\\n\",\n    \"    \\n\",\n    \"def check(f, x, y):\\n\",\n    \"    check = False not in [f(x[i])==y[i] for i in range(len(x))]\\n\",\n    \"    if not check:\\n\",\n    \"        print('Пока не получилось')\\n\",\n    \"    else:\\n\",\n    \"        print('Ура! Получилось!')\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 4,\n   \"metadata\": {\n    \"id\": \"uDeNNBzH8EJP\"\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"def parabola(a, b, c):\\n\",\n    \"    plt.figure(3)\\n\",\n    \"    plt.axhline(0, color='black')\\n\",\n    \"    plt.axvline(0, color='black')\\n\",\n    \"\\n\",\n    \"    x, y = [x for x, y in points], [y for x, y in points]\\n\",\n    \"    plt.scatter(x, y, c='r')\\n\",\n    \"\\n\",\n    \"\\n\",\n    \"    \\n\",\n    \"    if a != 0:\\n\",\n    \"        f = lambda x: a * x**2 + b * x + c\\n\",\n    \"        check(f, x, y)\\n\",\n    \"        \\n\",\n    \"        x = np.linspace(-15, 15, num=1000)\\n\",\n    \"        plt.plot(x, a * x**2 + b * x + c)\\n\",\n    \"    \\n\",\n    \"    plt.ylim(-35, 35)\\n\",\n    \"    plt.xlim(-10, 10)\\n\",\n    \"        \\n\",\n    \"    plt.title(get_polyfunc_title([a,b,c]))\\n\",\n    \"    plt.show()\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 5,\n   \"metadata\": {\n    \"colab\": {\n     \"base_uri\": \"https://localhost:8080/\",\n     \"height\": 17,\n     \"referenced_widgets\": [\n      \"23b53252b1624e90804a7c7447562d67\",\n      \"ecc92068c3f8403086a8a6b774e09983\"\n     ]\n    },\n    \"id\": \"aon-5jaz8EJZ\",\n    \"outputId\": \"1acc2458-bf4f-45a6-a2dc-552fc2127d00\"\n   },\n   \"outputs\": [\n    {\n     \"data\": {\n      \"application/vnd.jupyter.widget-view+json\": {\n       \"model_id\": \"f6bafc8e76cb4c418eaee7a1c698601e\",\n       \"version_major\": 2,\n       \"version_minor\": 0\n      },\n      \"text/plain\": [\n       \"interactive(children=(IntSlider(value=0, description='a', max=5, min=-5), IntSlider(value=0, description='b', …\"\n      ]\n     },\n     \"execution_count\": 5,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"points = [[-2.5, 15.0], \\n\",\n    \"          [-2, 10], \\n\",\n    \"          [-1.5, 7.0], \\n\",\n    \"          [-1, 6], \\n\",\n    \"          [-0.5, 7.0], \\n\",\n    \"          [0, 10], \\n\",\n    \"          [0.5, 15.0], \\n\",\n    \"          [1, 22], \\n\",\n    \"          [1.5, 31.0]]\\n\",\n    \"\\n\",\n    \"interactive_plot = interactive(parabola, a=(-5, 5, 1), b=(-100, 100, 1), c=(-20, 20, 1))\\n\",\n    \"output = interactive_plot.children[-1]\\n\",\n    \"output.layout.height = '300px'\\n\",\n    \"interactive_plot\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 6,\n   \"metadata\": {\n    \"colab\": {\n     \"base_uri\": \"https://localhost:8080/\",\n     \"height\": 17,\n     \"referenced_widgets\": [\n      \"92dac8a4be7a4aefa864a0f42507de69\",\n      \"b2056f3d55d04198a8cf15d8f7da7dea\"\n     ]\n    },\n    \"id\": \"O1npt0om8EJg\",\n    \"outputId\": \"19f4ba1b-9271-41f5-dc1a-3b3e8ec5d017\"\n   },\n   \"outputs\": [\n    {\n     \"data\": {\n      \"application/vnd.jupyter.widget-view+json\": {\n       \"model_id\": \"c36abffa7f7d4195ab4967483542b89b\",\n       \"version_major\": 2,\n       \"version_minor\": 0\n      },\n      \"text/plain\": [\n       \"interactive(children=(IntSlider(value=0, description='a', max=5, min=-5), IntSlider(value=0, description='b', …\"\n      ]\n     },\n     \"execution_count\": 6,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"points = [[-5.0, -68.0], \\n\",\n    \"          [-3.75, -42.375], \\n\",\n    \"          [-2.5, -23.0], \\n\",\n    \"          [-1.25, -9.875], \\n\",\n    \"          [0.0, -3.0], \\n\",\n    \"          [1.25, -2.375], \\n\",\n    \"          [2.5, -8.0], \\n\",\n    \"          [3.75, -19.875], \\n\",\n    \"          [5.0, -38.0]]\\n\",\n    \"\\n\",\n    \"interactive_plot = interactive(parabola, a=(-5, 5, 1), b=(-100, 100, 1), c=(-20, 20, 1))\\n\",\n    \"output = interactive_plot.children[-1]\\n\",\n    \"output.layout.height = '300px'\\n\",\n    \"interactive_plot\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": []\n  }\n ],\n \"metadata\": {\n  \"colab\": {\n   \"name\": \"Свойства коэффициентов квадратичной функции. Практика.ipynb\",\n   \"provenance\": []\n  },\n  \"kernelspec\": {\n   \"display_name\": \"Python 3 (ipykernel)\",\n   \"language\": \"python\",\n   \"name\": \"python3\"\n  },\n  \"language_info\": {\n   \"codemirror_mode\": {\n    \"name\": \"ipython\",\n    \"version\": 3\n   },\n   \"file_extension\": \".py\",\n   \"mimetype\": \"text/x-python\",\n   \"name\": \"python\",\n   \"nbconvert_exporter\": \"python\",\n   \"pygments_lexer\": \"ipython3\",\n   \"version\": \"3.12.1\"\n  },\n  \"widgets\": {\n   \"application/vnd.jupyter.widget-state+json\": {\n    \"23b53252b1624e90804a7c7447562d67\": {\n     \"model_module\": \"@jupyter-widgets/controls\",\n     \"model_module_version\": \"1.5.0\",\n     \"model_name\": \"VBoxModel\",\n     \"state\": {\n      \"_dom_classes\": [\n       \"widget-interact\"\n      ],\n      \"_model_module\": \"@jupyter-widgets/controls\",\n      \"_model_module_version\": \"1.5.0\",\n      \"_model_name\": \"VBoxModel\",\n      \"_view_count\": null,\n      \"_view_module\": \"@jupyter-widgets/controls\",\n      \"_view_module_version\": \"1.5.0\",\n      \"_view_name\": \"VBoxView\",\n      \"box_style\": \"\",\n      \"children\": [\n       \"IPY_MODEL_c0aac1d33ec64b58a987c5931ca76df2\",\n       \"IPY_MODEL_d78373d6170641b4972a006443c3c716\",\n       \"IPY_MODEL_f30928aa317240f1b817c9863da58c1e\",\n       \"IPY_MODEL_0de35e308c82461ba14ef9d2505f1b11\"\n      ],\n      \"layout\": \"IPY_MODEL_444c7bc3446548888acf56071411f992\"\n     }\n    },\n    \"92dac8a4be7a4aefa864a0f42507de69\": {\n     \"model_module\": \"@jupyter-widgets/controls\",\n     \"model_module_version\": \"1.5.0\",\n     \"model_name\": \"VBoxModel\",\n     \"state\": {\n      \"_dom_classes\": [\n       \"widget-interact\"\n      ],\n      \"_model_module\": \"@jupyter-widgets/controls\",\n      \"_model_module_version\": \"1.5.0\",\n      \"_model_name\": \"VBoxModel\",\n      \"_view_count\": null,\n      \"_view_module\": \"@jupyter-widgets/controls\",\n      \"_view_module_version\": \"1.5.0\",\n      \"_view_name\": \"VBoxView\",\n      \"box_style\": \"\",\n      \"children\": [\n       \"IPY_MODEL_eb9f298816a0464f90b78131457eedfe\",\n       \"IPY_MODEL_a10069c96f7d45cab08408305b670988\",\n       \"IPY_MODEL_de7aa150ba654fa88390d2a08ae964e4\",\n       \"IPY_MODEL_f11fe5be00a54bc889dc894499764724\"\n      ],\n      \"layout\": \"IPY_MODEL_ab7a4fb654b64c4797acc5e305e71e4d\"\n     }\n    }\n   }\n  }\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 4\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/SymPyLearn/2.1.ipynb b/SymPyLearn/2.1.ipynb
--- a/SymPyLearn/2.1.ipynb	(revision 5abcc0366c99590901efb046fd233a0e6912b4c8)
+++ b/SymPyLearn/2.1.ipynb	(date 1710344249073)
@@ -216,7 +216,7 @@
    "name": "python",
    "nbconvert_exporter": "python",
    "pygments_lexer": "ipython3",
-   "version": "3.12.1"
+   "version": "3.12.2"
   },
   "widgets": {
    "application/vnd.jupyter.widget-state+json": {
Index: SymPyLearn/1.2.ipynb
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\n \"cells\": [\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {\n    \"id\": \"XBfSbTeDk7SZ\"\n   },\n   \"source\": [\n    \"## Практика. Исследование параболы с помощью SymPy\\n\",\n    \"\\n\",\n    \"\\n\",\n    \"Итак, мы познакомились с несколькими инструментами для исследования функций. Для закрепления материала мы подготовили несколько практических заданий. Практика будет состоять из двух частей. В первой части нужно понять по эскизу графика функции, какие у нее знаки коэффициентов. <br><br>\\n\",\n    \"Во второй части практики исследуйте все типы элементарных функций, по примеру того, как я исследовал параболу в этом уроке. \"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {\n    \"id\": \"5ZLPTbegmvMB\"\n   },\n   \"source\": [\n    \"### Первая часть\\n\",\n    \"![practice_les-2_pos_1-2.png](https://sun9-58.userapi.com/c858228/v858228580/11d5ae/MzvyoLZ5ttY.jpg)![practice_les-2_pos_2-2.png](https://sun9-58.userapi.com/c858228/v858228580/11d5bc/yhr6c1d3LoI.jpg)<br>\\n\",\n    \"\\n\",\n    \"![practice_les-2_pos_1-1.png](https://sun9-52.userapi.com/c858228/v858228580/11d5a7/WY1EKnfr_Ro.jpg)![practice_les-2_pos_2-1.png](https://sun9-43.userapi.com/c858228/v858228580/11d5b5/cRGlFAOaPeA.jpg)<br>\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"1) $ax^2 + bx - c$<br>\\n\",\n    \"2) $ax^2 + bx + c$<br>\\n\",\n    \"3) $-ax^2 + bx + c$<br>\\n\",\n    \"4) $-ax^2 + bx - c$<br>\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {\n    \"id\": \"kqo0XVTqpE1Y\"\n   },\n   \"source\": [\n    \"### Вторая часть\\n\",\n    \"\\n\",\n    \"\\n\",\n    \"Импортируйте библиотеку и модуль `plot`, вызовите команду для красивой отрисовки формул. Постройте график каждой функции, проверьте, является ли она четной, нечетной или ни той, ни другой по виду графика и с помощью подстановки значений. Проверьте свойства коэффициентов, которые были упомянуты в уроке про элементарные функции, покрутите линейную функцию, варьируя угловой коэффициент, и подвигайте графики линейной функции и параболу вверх и вниз, меняя свободный член. Графики показательной функции и корня также можно двигать вверх и вниз, добавляя к ним положительные и отрицательные числа, например $f(x)=e^x+1$ –  это график функции $f(x)=e^x$, сдвинутый вверх на единицу. <br>\\n\",\n    \"<br>\\n\",\n    \"Для параболы проверьте свойство коэффициента при икс в квадрате. Будьте внимательны с промежутками для переменной (областью определения), не сломайте `symPy` :)\\n\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {\n    \"id\": \"SdaRZOdcpuXd\"\n   },\n   \"source\": [\n    \"**(1)** В качестве примера показательной функции используйте экспоненциальную функцию $e^x$. В `symPy` ее можно объявить так:\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 3,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"ename\": \"ModuleNotFoundError\",\n     \"evalue\": \"No module named 'matplotlib'\",\n     \"output_type\": \"error\",\n     \"traceback\": [\n      \"\\u001b[0;31m---------------------------------------------------------------------------\\u001b[0m\",\n      \"\\u001b[0;31mModuleNotFoundError\\u001b[0m                       Traceback (most recent call last)\",\n      \"Cell \\u001b[0;32mIn[3], line 3\\u001b[0m\\n\\u001b[1;32m      1\\u001b[0m \\u001b[38;5;28;01mfrom\\u001b[39;00m \\u001b[38;5;21;01msympy\\u001b[39;00m \\u001b[38;5;28;01mimport\\u001b[39;00m \\u001b[38;5;241m*\\u001b[39m\\n\\u001b[1;32m      2\\u001b[0m \\u001b[38;5;28;01mfrom\\u001b[39;00m \\u001b[38;5;21;01msympy\\u001b[39;00m\\u001b[38;5;21;01m.\\u001b[39;00m\\u001b[38;5;21;01mplotting\\u001b[39;00m \\u001b[38;5;28;01mimport\\u001b[39;00m plot\\n\\u001b[0;32m----> 3\\u001b[0m \\u001b[38;5;28;01mfrom\\u001b[39;00m \\u001b[38;5;21;01mmatplotlib\\u001b[39;00m \\u001b[38;5;28;01mimport\\u001b[39;00m \\u001b[38;5;241m*\\u001b[39m\\n\\u001b[1;32m      4\\u001b[0m x\\u001b[38;5;241m=\\u001b[39mSymbol(\\u001b[38;5;124m'\\u001b[39m\\u001b[38;5;124mx\\u001b[39m\\u001b[38;5;124m'\\u001b[39m)\\n\\u001b[1;32m      5\\u001b[0m init_printing(use_unicode\\u001b[38;5;241m=\\u001b[39m\\u001b[38;5;28;01mFalse\\u001b[39;00m, wrap_line\\u001b[38;5;241m=\\u001b[39m\\u001b[38;5;28;01mFalse\\u001b[39;00m, no_global\\u001b[38;5;241m=\\u001b[39m\\u001b[38;5;28;01mTrue\\u001b[39;00m)\\n\",\n      \"\\u001b[0;31mModuleNotFoundError\\u001b[0m: No module named 'matplotlib'\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"from sympy import *\\n\",\n    \"from sympy.plotting import plot\\n\",\n    \"from matplotlib import *\\n\",\n    \"x=Symbol('x')\\n\",\n    \"init_printing(use_unicode=False, wrap_line=False, no_global=True)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 2,\n   \"metadata\": {\n    \"id\": \"7r4i3FmLpt0s\"\n   },\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"  22000 |                                                      .\\n\",\n      \"        |                                                       \\n\",\n      \"        |                                                       \\n\",\n      \"        |                                                       \\n\",\n      \"        |                                                       \\n\",\n      \"        |                                                       \\n\",\n      \"        |                                                     . \\n\",\n      \"        |                                                       \\n\",\n      \"        |                                                       \\n\",\n      \"        |                                                       \\n\",\n      \"  11000 |----------------------------------------------------.--\\n\",\n      \"        |                                                       \\n\",\n      \"        |                                                       \\n\",\n      \"        |                                                   .   \\n\",\n      \"        |                                                       \\n\",\n      \"        |                                                  .    \\n\",\n      \"        |                                                       \\n\",\n      \"        |                                                 .     \\n\",\n      \"        |                                                /      \\n\",\n      \"        |                                             ...       \\n\",\n      \"      0 |_______________________________________________________\\n\",\n      \"         -10                        0                          10\\n\"\n     ]\n    },\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"<sympy.plotting.plot.Plot at 0x7fc5b4068ad0>\"\n      ]\n     },\n     \"execution_count\": 2,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"f = exp(x)\\n\",\n    \"plot(f)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 6,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/latex\": [\n       \"$\\\\displaystyle e$\"\n      ],\n      \"text/plain\": [\n       \"E\"\n      ]\n     },\n     \"execution_count\": 6,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"f.subs(x, 1)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 7,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/latex\": [\n       \"$\\\\displaystyle e^{-1}$\"\n      ],\n      \"text/plain\": [\n       \"exp(-1)\"\n      ]\n     },\n     \"execution_count\": 7,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"f.subs(x, -1)\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"не нечетная, не четная\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 8,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"  22000 |                                                      .\\n\",\n      \"        |                                                       \\n\",\n      \"        |                                                       \\n\",\n      \"        |                                                       \\n\",\n      \"        |                                                       \\n\",\n      \"        |                                                       \\n\",\n      \"        |                                                     . \\n\",\n      \"        |                                                       \\n\",\n      \"        |                                                       \\n\",\n      \"        |                                                       \\n\",\n      \"  11000 |----------------------------------------------------.--\\n\",\n      \"        |                                                       \\n\",\n      \"        |                                                       \\n\",\n      \"        |                                                   .   \\n\",\n      \"        |                                                       \\n\",\n      \"        |                                                  .    \\n\",\n      \"        |                                                       \\n\",\n      \"        |                                                 .     \\n\",\n      \"        |                                                /      \\n\",\n      \"        |                                             ...       \\n\",\n      \"      0 |_______________________________________________________\\n\",\n      \"         -10                        0                          10\\n\"\n     ]\n    },\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"<sympy.plotting.plot.Plot at 0x7fb733ce21d0>\"\n      ]\n     },\n     \"execution_count\": 8,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"f = exp(x) + 1\\n\",\n    \"plot(f)\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {\n    \"id\": \"J7Nzu-X0qPve\"\n   },\n   \"source\": [\n    \"**(2)** В качестве примера логарифмической функции используйте натуральный логарифм. В `symPy` его можно объявить так:\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 9,\n   \"metadata\": {\n    \"id\": \"pvzIk4xSqVta\"\n   },\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"    4.6 |                                                .......\\n\",\n      \"        |                                      ..........       \\n\",\n      \"        |                              ........                 \\n\",\n      \"        |                        ......                         \\n\",\n      \"        |                   .....                               \\n\",\n      \"        |               ....                                    \\n\",\n      \"        |            ...                                        \\n\",\n      \"        |          ..                                           \\n\",\n      \"        |        ..                                             \\n\",\n      \"        |      ..                                               \\n\",\n      \"    2.3 |-----/-------------------------------------------------\\n\",\n      \"        |    /                                                  \\n\",\n      \"        |   /                                                   \\n\",\n      \"        |  .                                                    \\n\",\n      \"        |                                                       \\n\",\n      \"        | .                                                     \\n\",\n      \"        |                                                       \\n\",\n      \"        |                                                       \\n\",\n      \"        |                                                       \\n\",\n      \"        |                                                       \\n\",\n      \"      0 |_______________________________________________________\\n\",\n      \"         1                          50.5                       100\\n\"\n     ]\n    },\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"<sympy.plotting.plot.Plot at 0x7fb73262e150>\"\n      ]\n     },\n     \"execution_count\": 9,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"f1 = ln(x)\\n\",\n    \"plot(f1,  (x, 1, 100))\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"не нечетная, не четная (выходит за область определения)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 17,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"   24.6 |                                                .......\\n\",\n      \"        |                                      ..........       \\n\",\n      \"        |                              ........                 \\n\",\n      \"        |                        ......                         \\n\",\n      \"        |                   .....                               \\n\",\n      \"        |               ....                                    \\n\",\n      \"        |            ...                                        \\n\",\n      \"        |          ..                                           \\n\",\n      \"        |        ..                                             \\n\",\n      \"        |      ..                                               \\n\",\n      \"   22.3 |-----/-------------------------------------------------\\n\",\n      \"        |    /                                                  \\n\",\n      \"        |   /                                                   \\n\",\n      \"        |  .                                                    \\n\",\n      \"        |                                                       \\n\",\n      \"        | .                                                     \\n\",\n      \"        |                                                       \\n\",\n      \"        |                                                       \\n\",\n      \"        |                                                       \\n\",\n      \"        |                                                       \\n\",\n      \"     20 |_______________________________________________________\\n\",\n      \"         1                          50.5                       100\\n\"\n     ]\n    },\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"<sympy.plotting.plot.Plot at 0x7fb7325f9d90>\"\n      ]\n     },\n     \"execution_count\": 17,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"f1 = ln(x) + 20\\n\",\n    \"plot(f1,  (x, 1, 100))\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {\n    \"id\": \"cIpbJ597qa7z\"\n   },\n   \"source\": [\n    \"**(3)** В качестве примера одной квадратичной функции используйте следующую функцию:   $f(x)=2x^2+3x-5$.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 12,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"    220 |                                                      /\\n\",\n      \"        |                                                     / \\n\",\n      \"        |                                                    .  \\n\",\n      \"        |                                                       \\n\",\n      \"        |                                                   .   \\n\",\n      \"        |\\\\                                                 /    \\n\",\n      \"        | \\\\                                               /     \\n\",\n      \"        |  \\\\                                             /      \\n\",\n      \"        |   \\\\                                           /       \\n\",\n      \"        |    \\\\                                         /        \\n\",\n      \"    105 |-----\\\\---------------------------------------/---------\\n\",\n      \"        |      \\\\                                     /          \\n\",\n      \"        |       \\\\                                   /           \\n\",\n      \"        |        \\\\                                 /            \\n\",\n      \"        |         ..                             ..             \\n\",\n      \"        |           \\\\                           /               \\n\",\n      \"        |            ..                       ..                \\n\",\n      \"        |              ..                   ..                  \\n\",\n      \"        |                ..              ...                    \\n\",\n      \"        |                  .....     ....                       \\n\",\n      \"    -10 |_______________________________________________________\\n\",\n      \"         -10                        0                          10\\n\"\n     ]\n    },\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"<sympy.plotting.plot.Plot at 0x7fb7325e8310>\"\n      ]\n     },\n     \"execution_count\": 12,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"f2 = 2* x **2 + 3*x - 5\\n\",\n    \"plot(f2)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 13,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/latex\": [\n       \"$\\\\displaystyle 0$\"\n      ],\n      \"text/plain\": [\n       \"0\"\n      ]\n     },\n     \"execution_count\": 13,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"f2.subs(x, 1)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 20,\n   \"metadata\": {\n    \"scrolled\": true\n   },\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/latex\": [\n       \"$\\\\displaystyle -6$\"\n      ],\n      \"text/plain\": [\n       \"-6\"\n      ]\n     },\n     \"execution_count\": 20,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"f2.subs(x, -1)\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"не нечетная, не четная\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 18,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"    420 |                                                      /\\n\",\n      \"        |                                                     . \\n\",\n      \"        |                                                       \\n\",\n      \"        |\\\\                                                   .  \\n\",\n      \"        | \\\\                                                 /   \\n\",\n      \"        |  \\\\                                               /    \\n\",\n      \"        |   .                                             .     \\n\",\n      \"        |                                                       \\n\",\n      \"        |    .                                           .      \\n\",\n      \"        |     \\\\                                         /       \\n\",\n      \"    205 |------\\\\---------------------------------------/--------\\n\",\n      \"        |       \\\\                                     /         \\n\",\n      \"        |        \\\\                                   /          \\n\",\n      \"        |         ..                               ..           \\n\",\n      \"        |           \\\\                             /             \\n\",\n      \"        |            \\\\                           /              \\n\",\n      \"        |             ..                       ..               \\n\",\n      \"        |               ..                   ..                 \\n\",\n      \"        |                 ..               ..                   \\n\",\n      \"        |                   ....       ....                     \\n\",\n      \"    -10 |_______________________________________________________\\n\",\n      \"         -10                        0                          10\\n\"\n     ]\n    },\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"<sympy.plotting.plot.Plot at 0x7fb7325fa310>\"\n      ]\n     },\n     \"execution_count\": 18,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"f2 = 4* x **2 + 3*x - 7\\n\",\n    \"plot(f2)\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {\n    \"id\": \"gRdTqWbJqmEK\"\n   },\n   \"source\": [\n    \"**(4)** В качестве примера другой квадратичной функции используйте следующую функцию:   $f(x)=5x^2-8$.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 23,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"    490 |\\\\                                                     /\\n\",\n      \"        | .                                                   . \\n\",\n      \"        |                                                       \\n\",\n      \"        |  .                                                 .  \\n\",\n      \"        |   \\\\                                               /   \\n\",\n      \"        |    .                                             .    \\n\",\n      \"        |                                                       \\n\",\n      \"        |     .                                           .     \\n\",\n      \"        |      \\\\                                         /      \\n\",\n      \"        |       \\\\                                       /       \\n\",\n      \"    240 |--------\\\\-------------------------------------/--------\\n\",\n      \"        |         \\\\                                   /         \\n\",\n      \"        |          \\\\                                 /          \\n\",\n      \"        |           \\\\                               /           \\n\",\n      \"        |            \\\\                             /            \\n\",\n      \"        |             ..                         ..             \\n\",\n      \"        |               \\\\                       /               \\n\",\n      \"        |                ..                   ..                \\n\",\n      \"        |                  ..               ..                  \\n\",\n      \"        |                    ....       ....                    \\n\",\n      \"    -10 |_______________________________________________________\\n\",\n      \"         -10                        0                          10\\n\"\n     ]\n    },\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"<sympy.plotting.plot.Plot at 0x7fb732425bd0>\"\n      ]\n     },\n     \"execution_count\": 23,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"f3 = 5*x **2 - 8\\n\",\n    \"plot(f3)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 21,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/latex\": [\n       \"$\\\\displaystyle -3$\"\n      ],\n      \"text/plain\": [\n       \"-3\"\n      ]\n     },\n     \"execution_count\": 21,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"f3.subs(x, 1)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 22,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/latex\": [\n       \"$\\\\displaystyle -3$\"\n      ],\n      \"text/plain\": [\n       \"-3\"\n      ]\n     },\n     \"execution_count\": 22,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"f3.subs(x, -1)\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"четная функция\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 24,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"   1000 |\\\\                                                     /\\n\",\n      \"        | .                                                   . \\n\",\n      \"        |                                                       \\n\",\n      \"        |  .                                                 .  \\n\",\n      \"        |   \\\\                                               /   \\n\",\n      \"        |    .                                             .    \\n\",\n      \"        |                                                       \\n\",\n      \"        |     .                                           .     \\n\",\n      \"        |      \\\\                                         /      \\n\",\n      \"        |       \\\\                                       /       \\n\",\n      \"    500 |--------\\\\-------------------------------------/--------\\n\",\n      \"        |         \\\\                                   /         \\n\",\n      \"        |          \\\\                                 /          \\n\",\n      \"        |           \\\\                               /           \\n\",\n      \"        |            \\\\                             /            \\n\",\n      \"        |             ..                         ..             \\n\",\n      \"        |               \\\\                       /               \\n\",\n      \"        |                ..                   ..                \\n\",\n      \"        |                  ..               ..                  \\n\",\n      \"        |                    ...         ...                    \\n\",\n      \"      0 |_______________________________________________________\\n\",\n      \"         -10                        0                          10\\n\"\n     ]\n    },\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"<sympy.plotting.plot.Plot at 0x7fb732426350>\"\n      ]\n     },\n     \"execution_count\": 24,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"f3 = 10*x **2 +2\\n\",\n    \"plot(f3)\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {\n    \"id\": \"e0xydv-Hqte7\"\n   },\n   \"source\": [\n    \"**(5)** В качестве функции корня используйте просто корень: $f(x)=\\\\sqrt(x)$.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 26,\n   \"metadata\": {\n    \"id\": \"996Gvn0Wuer7\"\n   },\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"     10 |                                                    ...\\n\",\n      \"        |                                               .....   \\n\",\n      \"        |                                          .....        \\n\",\n      \"        |                                     .....             \\n\",\n      \"        |                                 ....                  \\n\",\n      \"        |                             ....                      \\n\",\n      \"        |                         ....                          \\n\",\n      \"        |                      ...                              \\n\",\n      \"        |                  ....                                 \\n\",\n      \"        |               ...                                     \\n\",\n      \"      5 |-------------..----------------------------------------\\n\",\n      \"        |          ...                                          \\n\",\n      \"        |        ..                                             \\n\",\n      \"        |      ..                                               \\n\",\n      \"        |     /                                                 \\n\",\n      \"        |   ..                                                  \\n\",\n      \"        |  /                                                    \\n\",\n      \"        | .                                                     \\n\",\n      \"        |                                                       \\n\",\n      \"        |                                                       \\n\",\n      \"      0 |_______________________________________________________\\n\",\n      \"         0                          50                         100\\n\"\n     ]\n    },\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"<sympy.plotting.plot.Plot at 0x7fb732425290>\"\n      ]\n     },\n     \"execution_count\": 26,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"f4 = sqrt(x)\\n\",\n    \"plot(f4, (x, 0, 100))\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"не нечетная, не четная\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 27,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"     13 |                                                    ...\\n\",\n      \"        |                                               .....   \\n\",\n      \"        |                                          .....        \\n\",\n      \"        |                                     .....             \\n\",\n      \"        |                                 ....                  \\n\",\n      \"        |                             ....                      \\n\",\n      \"        |                         ....                          \\n\",\n      \"        |                      ...                              \\n\",\n      \"        |                  ....                                 \\n\",\n      \"        |               ...                                     \\n\",\n      \"      8 |-------------..----------------------------------------\\n\",\n      \"        |          ...                                          \\n\",\n      \"        |        ..                                             \\n\",\n      \"        |      ..                                               \\n\",\n      \"        |     /                                                 \\n\",\n      \"        |   ..                                                  \\n\",\n      \"        |  /                                                    \\n\",\n      \"        | .                                                     \\n\",\n      \"        |                                                       \\n\",\n      \"        |                                                       \\n\",\n      \"      3 |_______________________________________________________\\n\",\n      \"         0                          50                         100\\n\"\n     ]\n    },\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"<sympy.plotting.plot.Plot at 0x7fb732425b50>\"\n      ]\n     },\n     \"execution_count\": 27,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"f4 = sqrt(x) +3\\n\",\n    \"plot(f4, (x, 0, 100))\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": []\n  }\n ],\n \"metadata\": {\n  \"colab\": {\n   \"collapsed_sections\": [],\n   \"name\": \"practice_les-5.ipynb\",\n   \"provenance\": []\n  },\n  \"kernelspec\": {\n   \"display_name\": \"venv\",\n   \"language\": \"python\",\n   \"name\": \"venv\"\n  },\n  \"language_info\": {\n   \"codemirror_mode\": {\n    \"name\": \"ipython\",\n    \"version\": 3\n   },\n   \"file_extension\": \".py\",\n   \"mimetype\": \"text/x-python\",\n   \"name\": \"python\",\n   \"nbconvert_exporter\": \"python\",\n   \"pygments_lexer\": \"ipython3\",\n   \"version\": \"3.12.1\"\n  }\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 4\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/SymPyLearn/1.2.ipynb b/SymPyLearn/1.2.ipynb
--- a/SymPyLearn/1.2.ipynb	(revision 5abcc0366c99590901efb046fd233a0e6912b4c8)
+++ b/SymPyLearn/1.2.ipynb	(date 1711033955749)
@@ -805,9 +805,9 @@
    "provenance": []
   },
   "kernelspec": {
-   "display_name": "venv",
+   "display_name": "Python 3 (ipykernel)",
    "language": "python",
-   "name": "venv"
+   "name": "python3"
   },
   "language_info": {
    "codemirror_mode": {
@@ -819,7 +819,7 @@
    "name": "python",
    "nbconvert_exporter": "python",
    "pygments_lexer": "ipython3",
-   "version": "3.12.1"
+   "version": "3.12.2"
   }
  },
  "nbformat": 4,
Index: SymPyLearn/3.1.ipynb
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\n \"cells\": [\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 3,\n   \"id\": \"474d878d-864d-4e59-856e-9e952e5c5308\",\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"from sympy import *\\n\",\n    \"# import matplotlib.pyplot as plt\\n\",\n    \"import numpy as np\\n\",\n    \"x = Symbol('x')\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"id\": \"75c79988-9e9a-4e17-b91b-0fca254f7503\",\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"def print_points_ands_function(sympy_functionб points_X, points_Y):\\n\",\n    \"    def function(x_): return float(sympy_function.subs(x, x_))\\n\",\n    \"    \\n\",\n    \"    plt.ylim(-1, 35)\\n\",\n    \"    plt.xlim(-15, 15)\\n\",\n    \"    \\n\",\n    \"    plt.scatter(points_X, points_Y, c='r')\\n\",\n    \"    x_range = np.linspace(plt.xlim()[0], plt.xlim()[1], num=100)\\n\",\n    \"    function_Y = [function(x_) for x_ in x_range]\\n\",\n    \"    plt.plot(x_range, function_Y, 'b')\\n\",\n    \"    plt.show()\\n\",\n    \"    \\n\",\n    \"    MSE = sum([(points_Y[i] - function(points_X[i]))**2 for i in range(len(points_Y))]) / len(points_Y)\\n\",\n    \"    print(f'MSE = {MSE}')\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 4,\n   \"id\": \"2389ef72-a309-4117-ad25-2c8163cdc0a1\",\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"f1=3*x+5\\n\",\n    \"points1_X = np.array([2, 4, 8])\\n\",\n    \"points1_Y = np.array([12.258, 17.34, 30.151])\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"id\": \"d2e70e60-a5e6-4e3c-9e2b-1de8965d02d6\",\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"print_points_ands_function(f1, points1_X, points1_Y)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"id\": \"bcbeb5f2-fbe0-4482-9a54-53a0ce52853f\",\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"f2=0.25*x**2 + 0.75*x + 1.25\\n\",\n    \"points2_X = np.array([2, 4, 8])\\n\",\n    \"points2_Y = np.array([3.688, 10.791, 20.705])\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"id\": \"06135ff2-5bc5-4014-9d11-b1ef6a78ac9a\",\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"print_points_ands_function(f2, points2_X, points2_Y)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"id\": \"1b082214-f54c-4ecd-b26c-0107c4c59391\",\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"f3=0.5*x**3 - 0.25*x**2 + 0.75*x + 1.25\\n\",\n    \"points3_X = np.array([2, 4, 10, 12])\\n\",\n    \"points3_Y = np.array([4.872, 29.707, 246.971, 485.727, 840.658])\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"id\": \"b54fa524-f638-4aca-9a1a-0080bc8f2660\",\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"def print_points_ands_function(sympy_functionб points_X, points_Y):\\n\",\n    \"    def function(x_): return float(sympy_function.subs(x, x_))\\n\",\n    \"    \\n\",\n    \"    plt.ylim(-1, 1000)\\n\",\n    \"    plt.xlim(-15, 15)\\n\",\n    \"    \\n\",\n    \"    plt.scatter(points_X, points_Y, c='r')\\n\",\n    \"    x_range = np.linspace(plt.xlim()[0], plt.xlim()[1], num=100)\\n\",\n    \"    function_Y = [function(x_) for x_ in x_range]\\n\",\n    \"    plt.plot(x_range, function_Y, 'b')\\n\",\n    \"    plt.show()\\n\",\n    \"    \\n\",\n    \"    MSE = sum([(points_Y[i] - function(points_X[i]))**2 for i in range(len(points_Y))]) / len(points_Y)\\n\",\n    \"    print(f'MSE = {MSE}')\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"id\": \"dc9b3f2a-2cd1-4239-8d98-f0a964fd0521\",\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"print_points_ands_function(f3, points3_X, points3_Y)\"\n   ]\n  }\n ],\n \"metadata\": {\n  \"kernelspec\": {\n   \"display_name\": \"Python 3 (ipykernel)\",\n   \"language\": \"python\",\n   \"name\": \"python3\"\n  },\n  \"language_info\": {\n   \"codemirror_mode\": {\n    \"name\": \"ipython\",\n    \"version\": 3\n   },\n   \"file_extension\": \".py\",\n   \"mimetype\": \"text/x-python\",\n   \"name\": \"python\",\n   \"nbconvert_exporter\": \"python\",\n   \"pygments_lexer\": \"ipython3\",\n   \"version\": \"3.11.7\"\n  }\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 5\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/SymPyLearn/3.1.ipynb b/SymPyLearn/3.1.ipynb
--- a/SymPyLearn/3.1.ipynb	(revision 5abcc0366c99590901efb046fd233a0e6912b4c8)
+++ b/SymPyLearn/3.1.ipynb	(date 1710344222318)
@@ -2,25 +2,25 @@
  "cells": [
   {
    "cell_type": "code",
-   "execution_count": 3,
+   "execution_count": 1,
    "id": "474d878d-864d-4e59-856e-9e952e5c5308",
    "metadata": {},
    "outputs": [],
    "source": [
     "from sympy import *\n",
-    "# import matplotlib.pyplot as plt\n",
+    "import matplotlib.pyplot as plt\n",
     "import numpy as np\n",
     "x = Symbol('x')"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": null,
+   "execution_count": 4,
    "id": "75c79988-9e9a-4e17-b91b-0fca254f7503",
    "metadata": {},
    "outputs": [],
    "source": [
-    "def print_points_ands_function(sympy_functionб points_X, points_Y):\n",
+    "def print_points_ands_function(sympy_function, points_X, points_Y):\n",
     "    def function(x_): return float(sympy_function.subs(x, x_))\n",
     "    \n",
     "    plt.ylim(-1, 35)\n",
@@ -38,7 +38,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 4,
+   "execution_count": 5,
    "id": "2389ef72-a309-4117-ad25-2c8163cdc0a1",
    "metadata": {},
    "outputs": [],
@@ -50,17 +50,35 @@
   },
   {
    "cell_type": "code",
-   "execution_count": null,
+   "execution_count": 6,
    "id": "d2e70e60-a5e6-4e3c-9e2b-1de8965d02d6",
    "metadata": {},
-   "outputs": [],
+   "outputs": [
+    {
+     "data": {
+      "image/png": "",
+      "text/plain": [
+       "<Figure size 640x480 with 1 Axes>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "MSE = 1.007654999999999\n"
+     ]
+    }
+   ],
    "source": [
     "print_points_ands_function(f1, points1_X, points1_Y)"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": null,
+   "execution_count": 7,
    "id": "bcbeb5f2-fbe0-4482-9a54-53a0ce52853f",
    "metadata": {},
    "outputs": [],
@@ -72,34 +90,52 @@
   },
   {
    "cell_type": "code",
-   "execution_count": null,
+   "execution_count": 8,
    "id": "06135ff2-5bc5-4014-9d11-b1ef6a78ac9a",
    "metadata": {},
-   "outputs": [],
+   "outputs": [
+    {
+     "data": {
+      "image/png": "",
+      "text/plain": [
+       "<Figure size 640x480 with 1 Axes>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "MSE = 4.31251666666667\n"
+     ]
+    }
+   ],
    "source": [
     "print_points_ands_function(f2, points2_X, points2_Y)"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": null,
+   "execution_count": 13,
    "id": "1b082214-f54c-4ecd-b26c-0107c4c59391",
    "metadata": {},
    "outputs": [],
    "source": [
     "f3=0.5*x**3 - 0.25*x**2 + 0.75*x + 1.25\n",
-    "points3_X = np.array([2, 4, 10, 12])\n",
+    "points3_X = np.array([2, 4, 8, 10, 12])\n",
     "points3_Y = np.array([4.872, 29.707, 246.971, 485.727, 840.658])"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": null,
+   "execution_count": 14,
    "id": "b54fa524-f638-4aca-9a1a-0080bc8f2660",
    "metadata": {},
    "outputs": [],
    "source": [
-    "def print_points_ands_function(sympy_functionб points_X, points_Y):\n",
+    "def print_points_ands_function(sympy_function, points_X, points_Y):\n",
     "    def function(x_): return float(sympy_function.subs(x, x_))\n",
     "    \n",
     "    plt.ylim(-1, 1000)\n",
@@ -117,13 +153,39 @@
   },
   {
    "cell_type": "code",
-   "execution_count": null,
+   "execution_count": 15,
    "id": "dc9b3f2a-2cd1-4239-8d98-f0a964fd0521",
    "metadata": {},
-   "outputs": [],
+   "outputs": [
+    {
+     "data": {
+      "image/png": "",
+      "text/plain": [
+       "<Figure size 640x480 with 1 Axes>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "MSE = 3.404513399999994\n"
+     ]
+    }
+   ],
    "source": [
     "print_points_ands_function(f3, points3_X, points3_Y)"
    ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "id": "1025c5ee-df6c-481d-95c0-771b62e4bd77",
+   "metadata": {},
+   "outputs": [],
+   "source": []
   }
  ],
  "metadata": {
@@ -142,7 +204,7 @@
    "name": "python",
    "nbconvert_exporter": "python",
    "pygments_lexer": "ipython3",
-   "version": "3.11.7"
+   "version": "3.12.2"
   }
  },
  "nbformat": 4,
Index: SymPyLearn/2.2.ipynb
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\n \"cells\": [\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {\n    \"id\": \"eD2EhUUx5TNH\"\n   },\n   \"source\": [\n    \"## Свойства коэффициентов квадратичной функции. Практика\\n\",\n    \"\\n\",\n    \"В качестве практики подберите, варьируя коэффициенты, квадратичную функцию для набора точек. Другими словами, вам нужно решить задачу интерполяции полиномом второй степени. Ниже вы найдете код, который создает ползунки, с помощью которых можно варьировать коэффициенты a, b и c, подбирая нужный вид параболы, а также рисует набор точек. <br><br>\\n\",\n    \"Программа будет печатать над графиком актуальный вид функции и сама скажет вам, когда вы достигнете цели. \\n\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 1,\n   \"metadata\": {\n    \"id\": \"6jTnfZNO8EIx\"\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"%matplotlib inline\\n\",\n    \"from ipywidgets import interactive\\n\",\n    \"import matplotlib.pyplot as plt\\n\",\n    \"import numpy as np\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 2,\n   \"metadata\": {\n    \"id\": \"vR8eUwC88EJC\"\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"def get_polyfunc_title(koefs):\\n\",\n    \"    s_koefs = ''.join([f'+{koefs[i]}x^{len(koefs)-i-1}' if koefs[i]>0 \\n\",\n    \"                       else f'{koefs[i]}x^{len(koefs)-i-1}' if koefs[i]<0 \\n\",\n    \"                       else ''\\n\",\n    \"                       for i in range(len(koefs))])\\n\",\n    \"    expr = s_koefs.replace('x^0', '') \\\\\\n\",\n    \"                  .replace('+', ' + ') \\\\\\n\",\n    \"                  .replace('-', ' - ') \\\\\\n\",\n    \"                  .replace('x^1', 'x') \\\\\\n\",\n    \"                  .replace(' 1x', ' x')\\n\",\n    \"\\n\",\n    \"    if expr[:3]==' + ':\\n\",\n    \"        expr = expr[3:]\\n\",\n    \"    if expr:\\n\",\n    \"        return '$f(x) = ' + expr + '$'\\n\",\n    \"    \\n\",\n    \"def check(f, x, y):\\n\",\n    \"    check = False not in [f(x[i])==y[i] for i in range(len(x))]\\n\",\n    \"    if not check:\\n\",\n    \"        print('Пока не получилось')\\n\",\n    \"    else:\\n\",\n    \"        print('Ура! Получилось!')\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 3,\n   \"metadata\": {\n    \"id\": \"uDeNNBzH8EJP\"\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"def parabola(a, b, c):\\n\",\n    \"    plt.figure(3)\\n\",\n    \"    plt.axhline(0, color='black')\\n\",\n    \"    plt.axvline(0, color='black')\\n\",\n    \"\\n\",\n    \"    x, y = [x for x, y in points], [y for x, y in points]\\n\",\n    \"    plt.scatter(x, y, c='r')\\n\",\n    \"\\n\",\n    \"\\n\",\n    \"    \\n\",\n    \"    if a != 0:\\n\",\n    \"        f = lambda x: a * x**2 + b * x + c\\n\",\n    \"        check(f, x, y)\\n\",\n    \"        \\n\",\n    \"        x = np.linspace(-15, 15, num=1000)\\n\",\n    \"        plt.plot(x, a * x**2 + b * x + c)\\n\",\n    \"    \\n\",\n    \"    plt.ylim(-35, 35)\\n\",\n    \"    plt.xlim(-10, 10)\\n\",\n    \"        \\n\",\n    \"    plt.title(get_polyfunc_title([a,b,c]))\\n\",\n    \"    plt.show()\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 4,\n   \"metadata\": {\n    \"colab\": {\n     \"base_uri\": \"https://localhost:8080/\",\n     \"height\": 17,\n     \"referenced_widgets\": [\n      \"23b53252b1624e90804a7c7447562d67\",\n      \"ecc92068c3f8403086a8a6b774e09983\"\n     ]\n    },\n    \"id\": \"aon-5jaz8EJZ\",\n    \"outputId\": \"1acc2458-bf4f-45a6-a2dc-552fc2127d00\"\n   },\n   \"outputs\": [\n    {\n     \"data\": {\n      \"application/vnd.jupyter.widget-view+json\": {\n       \"model_id\": \"4f4737716ba6418da1a3074dbaae81e5\",\n       \"version_major\": 2,\n       \"version_minor\": 0\n      },\n      \"text/plain\": [\n       \"interactive(children=(IntSlider(value=0, description='a', max=5, min=-5), IntSlider(value=0, description='b', …\"\n      ]\n     },\n     \"metadata\": {},\n     \"output_type\": \"display_data\"\n    }\n   ],\n   \"source\": [\n    \"points = [[-2.5, 15.0], \\n\",\n    \"          [-2, 10], \\n\",\n    \"          [-1.5, 7.0], \\n\",\n    \"          [-1, 6], \\n\",\n    \"          [-0.5, 7.0], \\n\",\n    \"          [0, 10], \\n\",\n    \"          [0.5, 15.0], \\n\",\n    \"          [1, 22], \\n\",\n    \"          [1.5, 31.0]]\\n\",\n    \"\\n\",\n    \"interactive_plot = interactive(parabola, a=(-5, 5, 1), b=(-100, 100, 1), c=(-20, 20, 1))\\n\",\n    \"output = interactive_plot.children[-1]\\n\",\n    \"output.layout.height = '300px'\\n\",\n    \"interactive_plot\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 5,\n   \"metadata\": {\n    \"colab\": {\n     \"base_uri\": \"https://localhost:8080/\",\n     \"height\": 17,\n     \"referenced_widgets\": [\n      \"92dac8a4be7a4aefa864a0f42507de69\",\n      \"b2056f3d55d04198a8cf15d8f7da7dea\"\n     ]\n    },\n    \"id\": \"O1npt0om8EJg\",\n    \"outputId\": \"19f4ba1b-9271-41f5-dc1a-3b3e8ec5d017\"\n   },\n   \"outputs\": [\n    {\n     \"data\": {\n      \"application/vnd.jupyter.widget-view+json\": {\n       \"model_id\": \"f91f3765193a427d88970c91b29416e4\",\n       \"version_major\": 2,\n       \"version_minor\": 0\n      },\n      \"text/plain\": [\n       \"interactive(children=(IntSlider(value=0, description='a', max=5, min=-5), IntSlider(value=0, description='b', …\"\n      ]\n     },\n     \"metadata\": {},\n     \"output_type\": \"display_data\"\n    }\n   ],\n   \"source\": [\n    \"points = [[-5.0, -68.0], \\n\",\n    \"          [-3.75, -42.375], \\n\",\n    \"          [-2.5, -23.0], \\n\",\n    \"          [-1.25, -9.875], \\n\",\n    \"          [0.0, -3.0], \\n\",\n    \"          [1.25, -2.375], \\n\",\n    \"          [2.5, -8.0], \\n\",\n    \"          [3.75, -19.875], \\n\",\n    \"          [5.0, -38.0]]\\n\",\n    \"\\n\",\n    \"interactive_plot = interactive(parabola, a=(-5, 5, 1), b=(-100, 100, 1), c=(-20, 20, 1))\\n\",\n    \"output = interactive_plot.children[-1]\\n\",\n    \"output.layout.height = '300px'\\n\",\n    \"interactive_plot\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": []\n  }\n ],\n \"metadata\": {\n  \"colab\": {\n   \"name\": \"Свойства коэффициентов квадратичной функции. Практика.ipynb\",\n   \"provenance\": []\n  },\n  \"kernelspec\": {\n   \"display_name\": \"Python 3 (ipykernel)\",\n   \"language\": \"python\",\n   \"name\": \"python3\"\n  },\n  \"language_info\": {\n   \"codemirror_mode\": {\n    \"name\": \"ipython\",\n    \"version\": 3\n   },\n   \"file_extension\": \".py\",\n   \"mimetype\": \"text/x-python\",\n   \"name\": \"python\",\n   \"nbconvert_exporter\": \"python\",\n   \"pygments_lexer\": \"ipython3\",\n   \"version\": \"3.12.1\"\n  },\n  \"widgets\": {\n   \"application/vnd.jupyter.widget-state+json\": {\n    \"23b53252b1624e90804a7c7447562d67\": {\n     \"model_module\": \"@jupyter-widgets/controls\",\n     \"model_module_version\": \"1.5.0\",\n     \"model_name\": \"VBoxModel\",\n     \"state\": {\n      \"_dom_classes\": [\n       \"widget-interact\"\n      ],\n      \"_model_module\": \"@jupyter-widgets/controls\",\n      \"_model_module_version\": \"1.5.0\",\n      \"_model_name\": \"VBoxModel\",\n      \"_view_count\": null,\n      \"_view_module\": \"@jupyter-widgets/controls\",\n      \"_view_module_version\": \"1.5.0\",\n      \"_view_name\": \"VBoxView\",\n      \"box_style\": \"\",\n      \"children\": [\n       \"IPY_MODEL_c0aac1d33ec64b58a987c5931ca76df2\",\n       \"IPY_MODEL_d78373d6170641b4972a006443c3c716\",\n       \"IPY_MODEL_f30928aa317240f1b817c9863da58c1e\",\n       \"IPY_MODEL_0de35e308c82461ba14ef9d2505f1b11\"\n      ],\n      \"layout\": \"IPY_MODEL_444c7bc3446548888acf56071411f992\"\n     }\n    },\n    \"92dac8a4be7a4aefa864a0f42507de69\": {\n     \"model_module\": \"@jupyter-widgets/controls\",\n     \"model_module_version\": \"1.5.0\",\n     \"model_name\": \"VBoxModel\",\n     \"state\": {\n      \"_dom_classes\": [\n       \"widget-interact\"\n      ],\n      \"_model_module\": \"@jupyter-widgets/controls\",\n      \"_model_module_version\": \"1.5.0\",\n      \"_model_name\": \"VBoxModel\",\n      \"_view_count\": null,\n      \"_view_module\": \"@jupyter-widgets/controls\",\n      \"_view_module_version\": \"1.5.0\",\n      \"_view_name\": \"VBoxView\",\n      \"box_style\": \"\",\n      \"children\": [\n       \"IPY_MODEL_eb9f298816a0464f90b78131457eedfe\",\n       \"IPY_MODEL_a10069c96f7d45cab08408305b670988\",\n       \"IPY_MODEL_de7aa150ba654fa88390d2a08ae964e4\",\n       \"IPY_MODEL_f11fe5be00a54bc889dc894499764724\"\n      ],\n      \"layout\": \"IPY_MODEL_ab7a4fb654b64c4797acc5e305e71e4d\"\n     }\n    }\n   }\n  }\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 4\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/SymPyLearn/2.2.ipynb b/SymPyLearn/2.2.ipynb
--- a/SymPyLearn/2.2.ipynb	(revision 5abcc0366c99590901efb046fd233a0e6912b4c8)
+++ b/SymPyLearn/2.2.ipynb	(date 1710344249168)
@@ -214,7 +214,7 @@
    "name": "python",
    "nbconvert_exporter": "python",
    "pygments_lexer": "ipython3",
-   "version": "3.12.1"
+   "version": "3.12.2"
   },
   "widgets": {
    "application/vnd.jupyter.widget-state+json": {
Index: SymPyLearn/2.3.ipynb
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\n \"cells\": [\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {\n    \"id\": \"mEFNuokq2MMZ\"\n   },\n   \"source\": [\n    \"## Нахождение коэффициентов полиномов аналитически. Практика\\n\",\n    \"\\n\",\n    \"Для закрепления пройденного материала найдите коэффициенты функции для данного набора точек, и затем проверьте с помощью подстановки, правильный ли у вас получился результат. Степень полинома для составления системы выберите сами, исходя из пройденного в первом уроке правила.\\n\",\n    \"\\n\",\n    \"1. $(-2.5, 15.0), (-2, 10), (-1.5, 7.0)$\\n\",\n    \"2. $(-0.5, -15.0), (-1, -31), (0, -7), (0.5, -4.0)$\\n\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 3,\n   \"metadata\": {\n    \"id\": \"67VSSj5P12-l\"\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"from sympy import *\\n\",\n    \"from sympy.plotting import plot\\n\",\n    \"from sympy.solvers.inequalities import solve_univariate_inequality\\n\",\n    \"init_printing(use_unicode=False, wrap_line=False, no_global=True)\\n\",\n    \"a2,a1,a0=symbols('a2,a1,a0')\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 4,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"eq1=6.25*a2 - 2.5*a1 + a0 - 15\\n\",\n    \"eq2 = 4*a2-2*a1+a0-10\\n\",\n    \"eq3 = 2.25*a2 - 1.5*a1 + a0 - 7\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 5,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"image/png\": \"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\",\n      \"text/latex\": [\n       \"$\\\\displaystyle \\\\left\\\\{\\\\left( 4.0, \\\\  8.0, \\\\  10.0\\\\right)\\\\right\\\\}$\"\n      ],\n      \"text/plain\": [\n       \"{(4.0, 8.0, 10.0)}\"\n      ]\n     },\n     \"execution_count\": 5,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"nonlinsolve([eq1,eq2,eq3],[a2,a1,a0])\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 6,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"b3,b2,b1,b0=symbols('b3,b2,b1,b0')\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 8,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"eq4=-0.125*b3 + 0.25*b2 - 0.5*b1 + b0 + 15\\n\",\n    \"eq5 = -1*b3 + 1*b2 - 1*b1 + b0 + 31\\n\",\n    \"eq6 = 0*b3 + 0*b2 + 0*b1 + b0 + 7\\n\",\n    \"eq7 = 0.125*b3 + 0.25*b2 + 0.5*b1 + b0 + 4\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 9,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"image/png\": \"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\",\n      \"text/latex\": [\n       \"$\\\\displaystyle \\\\left\\\\{\\\\left( 4.0, \\\\  -10.0, \\\\  10.0, \\\\  -7.0\\\\right)\\\\right\\\\}$\"\n      ],\n      \"text/plain\": [\n       \"{(4.0, -10.0, 10.0, -7.0)}\"\n      ]\n     },\n     \"execution_count\": 9,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"nonlinsolve([eq4,eq5,eq6,eq7],[b3,b2,b1,b0])\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 2,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"0.0\"\n      ]\n     },\n     \"execution_count\": 2,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"6.25*4 - 2.5*8 + 10 - 15\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 3,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"0\"\n      ]\n     },\n     \"execution_count\": 3,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"4*4-2*8+10-10\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 4,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"0.0\"\n      ]\n     },\n     \"execution_count\": 4,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"2.25*4 - 1.5*8 + 10 - 7\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 5,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"0.0\"\n      ]\n     },\n     \"execution_count\": 5,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"-0.125*4 + 0.25*(-10) - 0.5*10 + (-7) + 15\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 6,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"0\"\n      ]\n     },\n     \"execution_count\": 6,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"-1*4 + 1*(-10) - 1*10 + (-7) + 31\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 7,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"0\"\n      ]\n     },\n     \"execution_count\": 7,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"0*4 + 0*(-10) + 0*10 + (-7) + 7\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 8,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"0.0\"\n      ]\n     },\n     \"execution_count\": 8,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"0.125*4 + 0.25*(-10) + 0.5*10 + (-7) + 4\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": []\n  }\n ],\n \"metadata\": {\n  \"colab\": {\n   \"collapsed_sections\": [],\n   \"name\": \"Нахождение коэффициентов полиномов аналитически. Практика.ipynb\",\n   \"provenance\": []\n  },\n  \"kernelspec\": {\n   \"display_name\": \"Python 3 (ipykernel)\",\n   \"language\": \"python\",\n   \"name\": \"python3\"\n  },\n  \"language_info\": {\n   \"codemirror_mode\": {\n    \"name\": \"ipython\",\n    \"version\": 3\n   },\n   \"file_extension\": \".py\",\n   \"mimetype\": \"text/x-python\",\n   \"name\": \"python\",\n   \"nbconvert_exporter\": \"python\",\n   \"pygments_lexer\": \"ipython3\",\n   \"version\": \"3.12.1\"\n  }\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 4\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/SymPyLearn/2.3.ipynb b/SymPyLearn/2.3.ipynb
--- a/SymPyLearn/2.3.ipynb	(revision 5abcc0366c99590901efb046fd233a0e6912b4c8)
+++ b/SymPyLearn/2.3.ipynb	(date 1710344249368)
@@ -278,7 +278,7 @@
    "name": "python",
    "nbconvert_exporter": "python",
    "pygments_lexer": "ipython3",
-   "version": "3.12.1"
+   "version": "3.12.2"
   }
  },
  "nbformat": 4,
Index: SymPyLearn/.ipynb_checkpoints/3.1-checkpoint.ipynb
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\n \"cells\": [\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 3,\n   \"id\": \"474d878d-864d-4e59-856e-9e952e5c5308\",\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"from sympy import *\\n\",\n    \"# import matplotlib.pyplot as plt\\n\",\n    \"import numpy as np\\n\",\n    \"x = Symbol('x')\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"id\": \"75c79988-9e9a-4e17-b91b-0fca254f7503\",\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"def print_points_ands_function(sympy_functionб points_X, points_Y):\\n\",\n    \"    def function(x_): return float(sympy_function.subs(x, x_))\\n\",\n    \"    \\n\",\n    \"    plt.ylim(-1, 35)\\n\",\n    \"    plt.xlim(-15, 15)\\n\",\n    \"    \\n\",\n    \"    plt.scatter(points_X, points_Y, c='r')\\n\",\n    \"    x_range = np.linspace(plt.xlim()[0], plt.xlim()[1], num=100)\\n\",\n    \"    function_Y = [function(x_) for x_ in x_range]\\n\",\n    \"    plt.plot(x_range, function_Y, 'b')\\n\",\n    \"    plt.show()\\n\",\n    \"    \\n\",\n    \"    MSE = sum([(points_Y[i] - function(points_X[i]))**2 for i in range(len(points_Y))]) / len(points_Y)\\n\",\n    \"    print(f'MSE = {MSE}')\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 4,\n   \"id\": \"2389ef72-a309-4117-ad25-2c8163cdc0a1\",\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"f1=3*x+5\\n\",\n    \"points1_X = np.array([2, 4, 8])\\n\",\n    \"points1_Y = np.array([12.258, 17.34, 30.151])\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"id\": \"d2e70e60-a5e6-4e3c-9e2b-1de8965d02d6\",\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"print_points_ands_function(f1, points1_X, points1_Y)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"id\": \"bcbeb5f2-fbe0-4482-9a54-53a0ce52853f\",\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"f2=0.25*x**2 + 0.75*x + 1.25\\n\",\n    \"points2_X = np.array([2, 4, 8])\\n\",\n    \"points2_Y = np.array([3.688, 10.791, 20.705])\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"id\": \"06135ff2-5bc5-4014-9d11-b1ef6a78ac9a\",\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"print_points_ands_function(f2, points2_X, points2_Y)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"id\": \"1b082214-f54c-4ecd-b26c-0107c4c59391\",\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"f3=0.5*x**3 - 0.25*x**2 + 0.75*x + 1.25\\n\",\n    \"points3_X = np.array([2, 4, 10, 12])\\n\",\n    \"points3_Y = np.array([4.872, 29.707, 246.971, 485.727, 840.658])\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"id\": \"b54fa524-f638-4aca-9a1a-0080bc8f2660\",\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"def print_points_ands_function(sympy_functionб points_X, points_Y):\\n\",\n    \"    def function(x_): return float(sympy_function.subs(x, x_))\\n\",\n    \"    \\n\",\n    \"    plt.ylim(-1, 1000)\\n\",\n    \"    plt.xlim(-15, 15)\\n\",\n    \"    \\n\",\n    \"    plt.scatter(points_X, points_Y, c='r')\\n\",\n    \"    x_range = np.linspace(plt.xlim()[0], plt.xlim()[1], num=100)\\n\",\n    \"    function_Y = [function(x_) for x_ in x_range]\\n\",\n    \"    plt.plot(x_range, function_Y, 'b')\\n\",\n    \"    plt.show()\\n\",\n    \"    \\n\",\n    \"    MSE = sum([(points_Y[i] - function(points_X[i]))**2 for i in range(len(points_Y))]) / len(points_Y)\\n\",\n    \"    print(f'MSE = {MSE}')\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"id\": \"dc9b3f2a-2cd1-4239-8d98-f0a964fd0521\",\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"print_points_ands_function(f3, points3_X, points3_Y)\"\n   ]\n  }\n ],\n \"metadata\": {\n  \"kernelspec\": {\n   \"display_name\": \"Python 3 (ipykernel)\",\n   \"language\": \"python\",\n   \"name\": \"python3\"\n  },\n  \"language_info\": {\n   \"codemirror_mode\": {\n    \"name\": \"ipython\",\n    \"version\": 3\n   },\n   \"file_extension\": \".py\",\n   \"mimetype\": \"text/x-python\",\n   \"name\": \"python\",\n   \"nbconvert_exporter\": \"python\",\n   \"pygments_lexer\": \"ipython3\",\n   \"version\": \"3.11.7\"\n  }\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 5\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/SymPyLearn/.ipynb_checkpoints/3.1-checkpoint.ipynb b/SymPyLearn/.ipynb_checkpoints/3.1-checkpoint.ipynb
--- a/SymPyLearn/.ipynb_checkpoints/3.1-checkpoint.ipynb	(revision 5abcc0366c99590901efb046fd233a0e6912b4c8)
+++ b/SymPyLearn/.ipynb_checkpoints/3.1-checkpoint.ipynb	(date 1710344222318)
@@ -2,25 +2,25 @@
  "cells": [
   {
    "cell_type": "code",
-   "execution_count": 3,
+   "execution_count": 1,
    "id": "474d878d-864d-4e59-856e-9e952e5c5308",
    "metadata": {},
    "outputs": [],
    "source": [
     "from sympy import *\n",
-    "# import matplotlib.pyplot as plt\n",
+    "import matplotlib.pyplot as plt\n",
     "import numpy as np\n",
     "x = Symbol('x')"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": null,
+   "execution_count": 4,
    "id": "75c79988-9e9a-4e17-b91b-0fca254f7503",
    "metadata": {},
    "outputs": [],
    "source": [
-    "def print_points_ands_function(sympy_functionб points_X, points_Y):\n",
+    "def print_points_ands_function(sympy_function, points_X, points_Y):\n",
     "    def function(x_): return float(sympy_function.subs(x, x_))\n",
     "    \n",
     "    plt.ylim(-1, 35)\n",
@@ -38,7 +38,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 4,
+   "execution_count": 5,
    "id": "2389ef72-a309-4117-ad25-2c8163cdc0a1",
    "metadata": {},
    "outputs": [],
@@ -50,17 +50,35 @@
   },
   {
    "cell_type": "code",
-   "execution_count": null,
+   "execution_count": 6,
    "id": "d2e70e60-a5e6-4e3c-9e2b-1de8965d02d6",
    "metadata": {},
-   "outputs": [],
+   "outputs": [
+    {
+     "data": {
+      "image/png": "",
+      "text/plain": [
+       "<Figure size 640x480 with 1 Axes>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "MSE = 1.007654999999999\n"
+     ]
+    }
+   ],
    "source": [
     "print_points_ands_function(f1, points1_X, points1_Y)"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": null,
+   "execution_count": 7,
    "id": "bcbeb5f2-fbe0-4482-9a54-53a0ce52853f",
    "metadata": {},
    "outputs": [],
@@ -72,34 +90,52 @@
   },
   {
    "cell_type": "code",
-   "execution_count": null,
+   "execution_count": 8,
    "id": "06135ff2-5bc5-4014-9d11-b1ef6a78ac9a",
    "metadata": {},
-   "outputs": [],
+   "outputs": [
+    {
+     "data": {
+      "image/png": "",
+      "text/plain": [
+       "<Figure size 640x480 with 1 Axes>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "MSE = 4.31251666666667\n"
+     ]
+    }
+   ],
    "source": [
     "print_points_ands_function(f2, points2_X, points2_Y)"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": null,
+   "execution_count": 13,
    "id": "1b082214-f54c-4ecd-b26c-0107c4c59391",
    "metadata": {},
    "outputs": [],
    "source": [
     "f3=0.5*x**3 - 0.25*x**2 + 0.75*x + 1.25\n",
-    "points3_X = np.array([2, 4, 10, 12])\n",
+    "points3_X = np.array([2, 4, 8, 10, 12])\n",
     "points3_Y = np.array([4.872, 29.707, 246.971, 485.727, 840.658])"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": null,
+   "execution_count": 14,
    "id": "b54fa524-f638-4aca-9a1a-0080bc8f2660",
    "metadata": {},
    "outputs": [],
    "source": [
-    "def print_points_ands_function(sympy_functionб points_X, points_Y):\n",
+    "def print_points_ands_function(sympy_function, points_X, points_Y):\n",
     "    def function(x_): return float(sympy_function.subs(x, x_))\n",
     "    \n",
     "    plt.ylim(-1, 1000)\n",
@@ -117,13 +153,39 @@
   },
   {
    "cell_type": "code",
-   "execution_count": null,
+   "execution_count": 15,
    "id": "dc9b3f2a-2cd1-4239-8d98-f0a964fd0521",
    "metadata": {},
-   "outputs": [],
+   "outputs": [
+    {
+     "data": {
+      "image/png": "",
+      "text/plain": [
+       "<Figure size 640x480 with 1 Axes>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "MSE = 3.404513399999994\n"
+     ]
+    }
+   ],
    "source": [
     "print_points_ands_function(f3, points3_X, points3_Y)"
    ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "id": "1025c5ee-df6c-481d-95c0-771b62e4bd77",
+   "metadata": {},
+   "outputs": [],
+   "source": []
   }
  ],
  "metadata": {
@@ -142,7 +204,7 @@
    "name": "python",
    "nbconvert_exporter": "python",
    "pygments_lexer": "ipython3",
-   "version": "3.11.7"
+   "version": "3.12.2"
   }
  },
  "nbformat": 4,
Index: SymPyLearn/lesson1.ipynb
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\n \"cells\": [\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 15,\n   \"id\": \"68eb47df-7a98-48ad-ab9c-c125f891acfc\",\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/latex\": [\n       \"$\\\\displaystyle x + 1$\"\n      ],\n      \"text/plain\": [\n       \"x + 1\"\n      ]\n     },\n     \"execution_count\": 15,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"from sympy import *\\n\",\n    \"from sympy.plotting import plot\\n\",\n    \"from sympy.solvers.inequalities import solve_univariate_inequality\\n\",\n    \"x=Symbol('x')\\n\",\n    \"f=x+1\\n\",\n    \"f\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 2,\n   \"id\": \"bc1c403a-1459-4bf6-b360-f65e94c1ad85\",\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"     10 |                                                     ..\\n\",\n      \"        |                                                  ...  \\n\",\n      \"        |                                                ..     \\n\",\n      \"        |                                             ...       \\n\",\n      \"        |                                          ...          \\n\",\n      \"        |                                        ..             \\n\",\n      \"        |                                     ...               \\n\",\n      \"        |                                  ...                  \\n\",\n      \"        |                                ..                     \\n\",\n      \"        |                             ...                       \\n\",\n      \"      0 |--------------------------...--------------------------\\n\",\n      \"        |                       ...                             \\n\",\n      \"        |                     ..                                \\n\",\n      \"        |                  ...                                  \\n\",\n      \"        |               ...                                     \\n\",\n      \"        |             ..                                        \\n\",\n      \"        |          ...                                          \\n\",\n      \"        |       ...                                             \\n\",\n      \"        |     ..                                                \\n\",\n      \"        |  ...                                                  \\n\",\n      \"    -10 |_______________________________________________________\\n\",\n      \"         -10                        0                          10\\n\"\n     ]\n    },\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"<sympy.plotting.plot.Plot at 0x7f2a08451fd0>\"\n      ]\n     },\n     \"execution_count\": 2,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"plot(x)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 3,\n   \"id\": \"ad832fee-e690-4dab-9be6-e0c6d0e0467c\",\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"init_printing(use_unicode=False, wrap_line=False, no_global=True)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 6,\n   \"id\": \"6680a345-11c1-4fe0-8296-61d64cc8cadc\",\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"f = x ** 2\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 7,\n   \"id\": \"b398f66d-13d6-44b5-aa40-884b2d2934f4\",\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"    100 |\\\\                                                     /\\n\",\n      \"        | .                                                   . \\n\",\n      \"        |                                                       \\n\",\n      \"        |  .                                                 .  \\n\",\n      \"        |   \\\\                                               /   \\n\",\n      \"        |    .                                             .    \\n\",\n      \"        |                                                       \\n\",\n      \"        |     .                                           .     \\n\",\n      \"        |      \\\\                                         /      \\n\",\n      \"        |       \\\\                                       /       \\n\",\n      \"     50 |--------\\\\-------------------------------------/--------\\n\",\n      \"        |         \\\\                                   /         \\n\",\n      \"        |          \\\\                                 /          \\n\",\n      \"        |           \\\\                               /           \\n\",\n      \"        |            \\\\                             /            \\n\",\n      \"        |             ..                         ..             \\n\",\n      \"        |               \\\\                       /               \\n\",\n      \"        |                ..                   ..                \\n\",\n      \"        |                  ..               ..                  \\n\",\n      \"        |                    ...         ...                    \\n\",\n      \"      0 |_______________________________________________________\\n\",\n      \"         -10                        0                          10\\n\"\n     ]\n    },\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"<sympy.plotting.plot.Plot at 0x7f2a001ea790>\"\n      ]\n     },\n     \"execution_count\": 7,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"plot(f)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 8,\n   \"id\": \"14c5356f-d575-49f5-9275-3eb4d50dd384\",\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/latex\": [\n       \"$\\\\displaystyle 10000$\"\n      ],\n      \"text/plain\": [\n       \"10000\"\n      ]\n     },\n     \"execution_count\": 8,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"f.subs(x, 100)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 9,\n   \"id\": \"81a46c36-2832-45ea-acb9-476e22692127\",\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"f2 = 2*x**2 + 10*x - 12\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 10,\n   \"id\": \"e796ada2-7c20-429c-8370-4283444b4f3b\",\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"    290 |                                                      /\\n\",\n      \"        |                                                     / \\n\",\n      \"        |                                                    .  \\n\",\n      \"        |                                                       \\n\",\n      \"        |                                                   .   \\n\",\n      \"        |                                                  /    \\n\",\n      \"        |                                                 /     \\n\",\n      \"        |                                                /      \\n\",\n      \"        |                                               /       \\n\",\n      \"        |                                             ..        \\n\",\n      \"    135 |--------------------------------------------/----------\\n\",\n      \"        |                                           /           \\n\",\n      \"        |                                          /            \\n\",\n      \"        |\\\\                                       ..             \\n\",\n      \"        | ..                                    /               \\n\",\n      \"        |   \\\\                                 ..                \\n\",\n      \"        |    ..                             ..                  \\n\",\n      \"        |      ..                         ..                    \\n\",\n      \"        |        ...                    ..                      \\n\",\n      \"        |           ...             ....                        \\n\",\n      \"    -20 |_______________________________________________________\\n\",\n      \"         -10                        0                          10\\n\"\n     ]\n    },\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"<sympy.plotting.plot.Plot at 0x7f2a00031990>\"\n      ]\n     },\n     \"execution_count\": 10,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"plot(f2)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 12,\n   \"id\": \"f156c2f6-9dd0-442d-9c1f-8c41f51b22b0\",\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"f3 = sqrt(x)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 14,\n   \"id\": \"7b21b5ad-0bcc-4c6f-b1ad-2ac074b97c8f\",\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"     10 |                                                    ...\\n\",\n      \"        |                                               .....   \\n\",\n      \"        |                                          .....        \\n\",\n      \"        |                                     .....             \\n\",\n      \"        |                                 ....                  \\n\",\n      \"        |                             ....                      \\n\",\n      \"        |                         ....                          \\n\",\n      \"        |                      ...                              \\n\",\n      \"        |                  ....                                 \\n\",\n      \"        |               ...                                     \\n\",\n      \"      5 |-------------..----------------------------------------\\n\",\n      \"        |          ...                                          \\n\",\n      \"        |        ..                                             \\n\",\n      \"        |      ..                                               \\n\",\n      \"        |     /                                                 \\n\",\n      \"        |   ..                                                  \\n\",\n      \"        |  /                                                    \\n\",\n      \"        | .                                                     \\n\",\n      \"        |                                                       \\n\",\n      \"        |                                                       \\n\",\n      \"      0 |_______________________________________________________\\n\",\n      \"         0                          50                         100\\n\"\n     ]\n    },\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"<sympy.plotting.plot.Plot at 0x7f29fbb56350>\"\n      ]\n     },\n     \"execution_count\": 14,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"plot(f3, (x, 0, 100))\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 16,\n   \"id\": \"63c963ff-c0e9-4c4f-a74e-bb5bb839b452\",\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/latex\": [\n       \"$\\\\displaystyle \\\\left[ -6, \\\\  1\\\\right]$\"\n      ],\n      \"text/plain\": [\n       \"[-6, 1]\"\n      ]\n     },\n     \"execution_count\": 16,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"solve(f2)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 18,\n   \"id\": \"522ccf2f-92f2-438b-9b1e-32be335b9506\",\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/latex\": [\n       \"$\\\\displaystyle \\\\left(-\\\\infty < x \\\\wedge x < -6\\\\right) \\\\vee \\\\left(1 < x \\\\wedge x < \\\\infty\\\\right)$\"\n      ],\n      \"text/plain\": [\n       \"Or(And(-oo < x, x < -6), And(1 < x, x < oo))\"\n      ]\n     },\n     \"execution_count\": 18,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"solve_univariate_inequality(f2>0, x)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"id\": \"1784f869-2392-4fd7-83dd-a192bdabe6b8\",\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": []\n  }\n ],\n \"metadata\": {\n  \"kernelspec\": {\n   \"display_name\": \"Python 3 (ipykernel)\",\n   \"language\": \"python\",\n   \"name\": \"python3\"\n  },\n  \"language_info\": {\n   \"codemirror_mode\": {\n    \"name\": \"ipython\",\n    \"version\": 3\n   },\n   \"file_extension\": \".py\",\n   \"mimetype\": \"text/x-python\",\n   \"name\": \"python\",\n   \"nbconvert_exporter\": \"python\",\n   \"pygments_lexer\": \"ipython3\",\n   \"version\": \"3.11.6\"\n  }\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 5\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/SymPyLearn/lesson1.ipynb b/SymPyLearn/lesson1.ipynb
--- a/SymPyLearn/lesson1.ipynb	(revision 5abcc0366c99590901efb046fd233a0e6912b4c8)
+++ b/SymPyLearn/lesson1.ipynb	(date 1711896892728)
@@ -362,7 +362,7 @@
    "name": "python",
    "nbconvert_exporter": "python",
    "pygments_lexer": "ipython3",
-   "version": "3.11.6"
+   "version": "3.12.2"
   }
  },
  "nbformat": 4,
Index: SymPyLearn/3.4.ipynb
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\n \"cells\": [\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {\n    \"id\": \"-zOqnEVGugHU\"\n   },\n   \"source\": [\n    \"# Блок 1.\\n\",\n    \"\\n\",\n    \"С помощью symPy найдите полиномы, описывающие данные наборы точек. Затем проведите полное исследование каждого полученного полинома: проверьте четность/нечетность, найдите нули, промежутки знакопостоянства. Постройте их графики. С помощью изменения промежутка для х добейтесь того, чтобы все нули были отображены на графике функции. <br><br><br>\\n\",\n    \"а) $(-4; -4268), (-3; -1227), (-1; -17), (1; 17), (3; 1227), (4; 4268)$<br><br>\\n\",\n    \"б)$ (-4; -16729), (-3; -3999), (-1; 5), (1; 1), (3; 4005), (4; 16735)$\\n\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 4,\n   \"metadata\": {\n    \"id\": \"mO8e_U97uxvk\"\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"from sympy import *\\n\",\n    \"# import matplotlib.pyplot as plt\\n\",\n    \"import numpy as np\\n\",\n    \"\\n\",\n    \"a0, a1, a2, a3, a4, a5 = symbols('a0, a1, a2, a3, a4, a5')\\n\",\n    \"x = Symbol('x')\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 5,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"def print_points_ands_function1(sympy_function):\\n\",\n    \"    def function(x_): return float(sympy_function.subs(x, x_))\\n\",\n    \"    \\n\",\n    \"    points_X = np.array([-4, -3, -1, 1, 3, 4])\\n\",\n    \"    points_Y = np.array([-4268, -1227, -17, 17, 1227, 4268])\\n\",\n    \"    plt.ylim(-5000, 5000)\\n\",\n    \"    plt.xlim(-5, 5)\\n\",\n    \"    \\n\",\n    \"    plt.scatter(points_X, points_Y, c='r')\\n\",\n    \"    x_range = np.linspace(plt.xlim()[0], plt.xlim()[1], num=100)\\n\",\n    \"    function_Y = [function(x_) for x_ in x_range]\\n\",\n    \"    plt.plot(x_range, function_Y, 'b')\\n\",\n    \"    plt.show()\\n\",\n    \"    \\n\",\n    \"    MSE = sum([(points_Y[i] - function(points_X[i]))**2 for i in range(len(points_Y))]) / len(points_Y)\\n\",\n    \"    print(f'MSE = {MSE}')\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 6,\n   \"metadata\": {\n    \"id\": \"mO8e_U97uxvk\"\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"eq1=((-4)**6)*a5 + ((-4)**5)*a4 + ((-4)**4)*a3 + ((-4)**3)*a2 + ((-4)**2)*a1 + (-4)*a0 + 4268 \\n\",\n    \"eq2=((-3)**6)*a5 + ((-3)**5)*a4 + ((-3)**4)*a3 + ((-3)**3)*a2 + ((-3)**2)*a1 + (-3)*a0 + 1227\\n\",\n    \"eq3=((-1)**6)*a5 + ((-1)**5)*a4 + ((-1)**4)*a3 + ((-1)**3)*a2 + ((-1)**2)*a1 + (-1)*a0 + 17\\n\",\n    \"eq4=((1)**6)*a5 + ((1)**5)*a4 + ((1)**4)*a3 + ((1)**3)*a2 + ((1)**2)*a1 + (1)*a0 - 17\\n\",\n    \"eq5=((3)**6)*a5 + ((3)**5)*a4 + ((3)**4)*a3 + ((3)**3)*a2 + ((3)**2)*a1 + (3)*a0 - 1227\\n\",\n    \"eq6=((4)**6)*a5 + ((4)**5)*a4 + ((4)**4)*a3 + ((4)**3)*a2 + ((4)**2)*a1 + (4)*a0 - 4268 \"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 7,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/latex\": [\n       \"$\\\\displaystyle \\\\left\\\\{\\\\left( 0, \\\\  3, \\\\  0, \\\\  19, \\\\  0, \\\\  -5\\\\right)\\\\right\\\\}$\"\n      ],\n      \"text/plain\": [\n       \"{(0, 3, 0, 19, 0, -5)}\"\n      ]\n     },\n     \"execution_count\": 7,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"nonlinsolve([eq1,eq2,eq3,eq4,eq5,eq6],[a5,a4,a3,a2,a1,a0])\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 8,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"f1 = 3*x**5 + 19*x**3 -5*x\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 9,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/latex\": [\n       \"$\\\\displaystyle 3 x^{5} + 19 x^{3} - 5 x$\"\n      ],\n      \"text/plain\": [\n       \"3*x**5 + 19*x**3 - 5*x\"\n      ]\n     },\n     \"execution_count\": 9,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"f1\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 10,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"ename\": \"NameError\",\n     \"evalue\": \"name 'plt' is not defined\",\n     \"output_type\": \"error\",\n     \"traceback\": [\n      \"\\u001b[0;31m---------------------------------------------------------------------------\\u001b[0m\",\n      \"\\u001b[0;31mNameError\\u001b[0m                                 Traceback (most recent call last)\",\n      \"Cell \\u001b[0;32mIn[10], line 1\\u001b[0m\\n\\u001b[0;32m----> 1\\u001b[0m \\u001b[43mprint_points_ands_function1\\u001b[49m\\u001b[43m(\\u001b[49m\\u001b[43mf1\\u001b[49m\\u001b[43m)\\u001b[49m\\n\",\n      \"Cell \\u001b[0;32mIn[5], line 6\\u001b[0m, in \\u001b[0;36mprint_points_ands_function1\\u001b[0;34m(sympy_function)\\u001b[0m\\n\\u001b[1;32m      4\\u001b[0m points_X \\u001b[38;5;241m=\\u001b[39m np\\u001b[38;5;241m.\\u001b[39marray([\\u001b[38;5;241m-\\u001b[39m\\u001b[38;5;241m4\\u001b[39m, \\u001b[38;5;241m-\\u001b[39m\\u001b[38;5;241m3\\u001b[39m, \\u001b[38;5;241m-\\u001b[39m\\u001b[38;5;241m1\\u001b[39m, \\u001b[38;5;241m1\\u001b[39m, \\u001b[38;5;241m3\\u001b[39m, \\u001b[38;5;241m4\\u001b[39m])\\n\\u001b[1;32m      5\\u001b[0m points_Y \\u001b[38;5;241m=\\u001b[39m np\\u001b[38;5;241m.\\u001b[39marray([\\u001b[38;5;241m-\\u001b[39m\\u001b[38;5;241m4268\\u001b[39m, \\u001b[38;5;241m-\\u001b[39m\\u001b[38;5;241m1227\\u001b[39m, \\u001b[38;5;241m-\\u001b[39m\\u001b[38;5;241m17\\u001b[39m, \\u001b[38;5;241m17\\u001b[39m, \\u001b[38;5;241m1227\\u001b[39m, \\u001b[38;5;241m4268\\u001b[39m])\\n\\u001b[0;32m----> 6\\u001b[0m \\u001b[43mplt\\u001b[49m\\u001b[38;5;241m.\\u001b[39mylim(\\u001b[38;5;241m-\\u001b[39m\\u001b[38;5;241m5000\\u001b[39m, \\u001b[38;5;241m5000\\u001b[39m)\\n\\u001b[1;32m      7\\u001b[0m plt\\u001b[38;5;241m.\\u001b[39mxlim(\\u001b[38;5;241m-\\u001b[39m\\u001b[38;5;241m5\\u001b[39m, \\u001b[38;5;241m5\\u001b[39m)\\n\\u001b[1;32m      9\\u001b[0m plt\\u001b[38;5;241m.\\u001b[39mscatter(points_X, points_Y, c\\u001b[38;5;241m=\\u001b[39m\\u001b[38;5;124m'\\u001b[39m\\u001b[38;5;124mr\\u001b[39m\\u001b[38;5;124m'\\u001b[39m)\\n\",\n      \"\\u001b[0;31mNameError\\u001b[0m: name 'plt' is not defined\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"print_points_ands_function1(f1)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 11,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"[0,\\n\",\n       \" -I*sqrt(19/6 + sqrt(421)/6),\\n\",\n       \" I*sqrt(19/6 + sqrt(421)/6),\\n\",\n       \" -sqrt(-19/6 + sqrt(421)/6),\\n\",\n       \" sqrt(-19/6 + sqrt(421)/6)]\"\n      ]\n     },\n     \"execution_count\": 11,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"solve(f1)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 12,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/latex\": [\n       \"$\\\\displaystyle \\\\left(x < 0 \\\\wedge - \\\\sqrt{- \\\\frac{19}{6} + \\\\frac{\\\\sqrt{421}}{6}} < x\\\\right) \\\\vee \\\\left(x < \\\\infty \\\\wedge \\\\sqrt{- \\\\frac{19}{6} + \\\\frac{\\\\sqrt{421}}{6}} < x\\\\right)$\"\n      ],\n      \"text/plain\": [\n       \"((x < oo) & (sqrt(-19/6 + sqrt(421)/6) < x)) | ((x < 0) & (-sqrt(-19/6 + sqrt(421)/6) < x))\"\n      ]\n     },\n     \"execution_count\": 12,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"solve_univariate_inequality(f1>0, x)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 13,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/latex\": [\n       \"$\\\\displaystyle \\\\left(-\\\\infty < x \\\\wedge x < - \\\\sqrt{- \\\\frac{19}{6} + \\\\frac{\\\\sqrt{421}}{6}}\\\\right) \\\\vee \\\\left(0 < x \\\\wedge x < \\\\sqrt{- \\\\frac{19}{6} + \\\\frac{\\\\sqrt{421}}{6}}\\\\right)$\"\n      ],\n      \"text/plain\": [\n       \"((0 < x) & (x < sqrt(-19/6 + sqrt(421)/6))) | ((-oo < x) & (x < -sqrt(-19/6 + sqrt(421)/6)))\"\n      ]\n     },\n     \"execution_count\": 13,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"solve_univariate_inequality(f1<0, x)\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"функция нечнтная\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 14,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"def print_points_ands_function2(sympy_function):\\n\",\n    \"    def function(x_): return float(sympy_function.subs(x, x_))\\n\",\n    \"    \\n\",\n    \"    points_X = np.array([-4, -3, -1, 1, 3, 4])\\n\",\n    \"    points_Y = np.array([-16729, -3999, 5, 1, 4005, 16735])\\n\",\n    \"    plt.ylim(-5000, 5000)\\n\",\n    \"    plt.xlim(-5, 5)\\n\",\n    \"    \\n\",\n    \"    plt.scatter(points_X, points_Y, c='r')\\n\",\n    \"    x_range = np.linspace(plt.xlim()[0], plt.xlim()[1], num=100)\\n\",\n    \"    function_Y = [function(x_) for x_ in x_range]\\n\",\n    \"    plt.plot(x_range, function_Y, 'b')\\n\",\n    \"    plt.show()\\n\",\n    \"    \\n\",\n    \"    MSE = sum([(points_Y[i] - function(points_X[i]))**2 for i in range(len(points_Y))]) / len(points_Y)\\n\",\n    \"    print(f'MSE = {MSE}')\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 15,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"eq1=((-4)**6)*a5 + ((-4)**5)*a4 + ((-4)**4)*a3 + ((-4)**3)*a2 + ((-4)**2)*a1 + (-4)*a0 + 16729 \\n\",\n    \"eq2=((-3)**6)*a5 + ((-3)**5)*a4 + ((-3)**4)*a3 + ((-3)**3)*a2 + ((-3)**2)*a1 + (-3)*a0 + 3999\\n\",\n    \"eq3=((-1)**6)*a5 + ((-1)**5)*a4 + ((-1)**4)*a3 + ((-1)**3)*a2 + ((-1)**2)*a1 + (-1)*a0 - 5\\n\",\n    \"eq4=((1)**6)*a5 + ((1)**5)*a4 + ((1)**4)*a3 + ((1)**3)*a2 + ((1)**2)*a1 + (1)*a0 - 1\\n\",\n    \"eq5=((3)**6)*a5 + ((3)**5)*a4 + ((3)**4)*a3 + ((3)**3)*a2 + ((3)**2)*a1 + (3)*a0 - 4005\\n\",\n    \"eq6=((4)**6)*a5 + ((4)**5)*a4 + ((4)**4)*a3 + ((4)**3)*a2 + ((4)**2)*a1 + (4)*a0 - 16735 \"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 16,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/latex\": [\n       \"$\\\\displaystyle \\\\left\\\\{\\\\left( \\\\frac{1}{48}, \\\\  16, \\\\  - \\\\frac{13}{24}, \\\\  7, \\\\  \\\\frac{169}{48}, \\\\  -25\\\\right)\\\\right\\\\}$\"\n      ],\n      \"text/plain\": [\n       \"{(1/48, 16, -13/24, 7, 169/48, -25)}\"\n      ]\n     },\n     \"execution_count\": 16,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"nonlinsolve([eq1,eq2,eq3,eq4,eq5,eq6],[a5,a4,a3,a2,a1,a0])\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 18,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/latex\": [\n       \"$\\\\displaystyle 0.0208333333333333 x^{6} + 16 x^{5} - 0.541666666666667 x^{4} + 7 x^{3} + 3.52083333333333 x^{2} - 25 x$\"\n      ],\n      \"text/plain\": [\n       \"0.0208333333333333*x**6 + 16*x**5 - 0.541666666666667*x**4 + 7*x**3 + 3.52083333333333*x**2 - 25*x\"\n      ]\n     },\n     \"execution_count\": 18,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"f2 = (1/48)*x**6 + 16*x**5 - (13/24)*x**4 +7 *x**3 + (169/48)*x**2 - 25*x\\n\",\n    \"f2\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 19,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"ename\": \"NameError\",\n     \"evalue\": \"name 'plt' is not defined\",\n     \"output_type\": \"error\",\n     \"traceback\": [\n      \"\\u001b[0;31m---------------------------------------------------------------------------\\u001b[0m\",\n      \"\\u001b[0;31mNameError\\u001b[0m                                 Traceback (most recent call last)\",\n      \"Cell \\u001b[0;32mIn[19], line 1\\u001b[0m\\n\\u001b[0;32m----> 1\\u001b[0m \\u001b[43mprint_points_ands_function1\\u001b[49m\\u001b[43m(\\u001b[49m\\u001b[43mf2\\u001b[49m\\u001b[43m)\\u001b[49m\\n\",\n      \"Cell \\u001b[0;32mIn[14], line 6\\u001b[0m, in \\u001b[0;36mprint_points_ands_function1\\u001b[0;34m(sympy_function)\\u001b[0m\\n\\u001b[1;32m      4\\u001b[0m points_X \\u001b[38;5;241m=\\u001b[39m np\\u001b[38;5;241m.\\u001b[39marray([\\u001b[38;5;241m-\\u001b[39m\\u001b[38;5;241m4\\u001b[39m, \\u001b[38;5;241m-\\u001b[39m\\u001b[38;5;241m3\\u001b[39m, \\u001b[38;5;241m-\\u001b[39m\\u001b[38;5;241m1\\u001b[39m, \\u001b[38;5;241m1\\u001b[39m, \\u001b[38;5;241m3\\u001b[39m, \\u001b[38;5;241m4\\u001b[39m])\\n\\u001b[1;32m      5\\u001b[0m points_Y \\u001b[38;5;241m=\\u001b[39m np\\u001b[38;5;241m.\\u001b[39marray([\\u001b[38;5;241m-\\u001b[39m\\u001b[38;5;241m16729\\u001b[39m, \\u001b[38;5;241m-\\u001b[39m\\u001b[38;5;241m3999\\u001b[39m, \\u001b[38;5;241m5\\u001b[39m, \\u001b[38;5;241m1\\u001b[39m, \\u001b[38;5;241m4005\\u001b[39m, \\u001b[38;5;241m16735\\u001b[39m])\\n\\u001b[0;32m----> 6\\u001b[0m \\u001b[43mplt\\u001b[49m\\u001b[38;5;241m.\\u001b[39mylim(\\u001b[38;5;241m-\\u001b[39m\\u001b[38;5;241m5000\\u001b[39m, \\u001b[38;5;241m5000\\u001b[39m)\\n\\u001b[1;32m      7\\u001b[0m plt\\u001b[38;5;241m.\\u001b[39mxlim(\\u001b[38;5;241m-\\u001b[39m\\u001b[38;5;241m5\\u001b[39m, \\u001b[38;5;241m5\\u001b[39m)\\n\\u001b[1;32m      9\\u001b[0m plt\\u001b[38;5;241m.\\u001b[39mscatter(points_X, points_Y, c\\u001b[38;5;241m=\\u001b[39m\\u001b[38;5;124m'\\u001b[39m\\u001b[38;5;124mr\\u001b[39m\\u001b[38;5;124m'\\u001b[39m)\\n\",\n      \"\\u001b[0;31mNameError\\u001b[0m: name 'plt' is not defined\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"print_points_ands_function2(f2)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 20,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"[-768.034421883303,\\n\",\n       \" -1.06055986496118,\\n\",\n       \" 0.0,\\n\",\n       \" 0.987296715550467,\\n\",\n       \" 0.0538425163569194 - 1.2203560309377*I,\\n\",\n       \" 0.0538425163569194 + 1.2203560309377*I]\"\n      ]\n     },\n     \"execution_count\": 20,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"solve(f2)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 21,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/latex\": [\n       \"$\\\\displaystyle \\\\left(-1.06055986496118 < x \\\\wedge x < 0\\\\right) \\\\vee \\\\left(0.987296715550467 < x \\\\wedge x < \\\\infty\\\\right) \\\\vee \\\\left(-\\\\infty < x \\\\wedge x < -768.034421883303\\\\right)$\"\n      ],\n      \"text/plain\": [\n       \"((-1.06055986496118 < x) & (x < 0)) | ((0.987296715550467 < x) & (x < oo)) | ((-oo < x) & (x < -768.034421883303))\"\n      ]\n     },\n     \"execution_count\": 21,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"solve_univariate_inequality(f2>0, x)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 22,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/latex\": [\n       \"$\\\\displaystyle \\\\left(-768.034421883303 < x \\\\wedge x < -1.06055986496118\\\\right) \\\\vee \\\\left(0 < x \\\\wedge x < 0.987296715550467\\\\right)$\"\n      ],\n      \"text/plain\": [\n       \"((-768.034421883303 < x) & (x < -1.06055986496118)) | ((x < 0.987296715550467) & (0 < x))\"\n      ]\n     },\n     \"execution_count\": 22,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"solve_univariate_inequality(f2<0, x)\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"функция не четная, не нечетная \"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {\n    \"id\": \"4jCUKC9CuyKO\"\n   },\n   \"source\": [\n    \"# Блок 2.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 75,\n   \"metadata\": {\n    \"id\": \"5ElcKCqet0wk\"\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"from sympy import *\\n\",\n    \"from sympy.plotting import plot\\n\",\n    \"init_printing(use_unicode=False, wrap_line=False, no_global=True)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 76,\n   \"metadata\": {\n    \"id\": \"QwTY4Sq8t0w2\"\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"import matplotlib.pyplot as plt\\n\",\n    \"import numpy as np\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 77,\n   \"metadata\": {\n    \"id\": \"Y0t8k28Jt0xG\"\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"x = Symbol('x')\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {\n    \"id\": \"wLhMVWF9t0xQ\"\n   },\n   \"source\": [\n    \"## 1.\\n\",\n    \"### Получите значение MSE меньшее 5.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 78,\n   \"metadata\": {\n    \"id\": \"LX3-aD49t0xU\"\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"def print_points_ands_function1(sympy_function):\\n\",\n    \"    def function(x_): return float(sympy_function.subs(x, x_))\\n\",\n    \"    \\n\",\n    \"    points_X = np.array([-2, -1, 0, 1, 2, 3, 3.5, 4, 4.5, 5])\\n\",\n    \"    points_Y = np.array([2, -4, 1, 8, 21, 40, 47, 65, 75, 92])\\n\",\n    \"    plt.xlim(-6, 10)\\n\",\n    \"    plt.ylim(-1, 100)\\n\",\n    \"    \\n\",\n    \"    plt.scatter(points_X, points_Y, c='r')\\n\",\n    \"    x_range = np.linspace(plt.xlim()[0], plt.xlim()[1], num=100)\\n\",\n    \"    function_Y = [function(x_) for x_ in x_range]\\n\",\n    \"    plt.plot(x_range, function_Y, 'b')\\n\",\n    \"    plt.show()\\n\",\n    \"    \\n\",\n    \"    MSE = sum([(points_Y[i] - function(points_X[i]))**2 for i in range(len(points_Y))]) / len(points_Y)\\n\",\n    \"    print(f'MSE = {MSE}')\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 107,\n   \"metadata\": {\n    \"id\": \"tCcjAV0qt0xb\",\n    \"outputId\": \"7d73b65e-59f0-4d31-c914-f97d7da81900\"\n   },\n   \"outputs\": [\n    {\n     \"data\": {\n      \"image/png\": \"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\",\n      \"text/latex\": [\n       \"$\\\\displaystyle - 32.0 x + 108.0 \\\\left(0.166666666666667 x + 1\\\\right)^{2} - 109.0$\"\n      ],\n      \"text/plain\": [\n       \"                                         2        \\n\",\n       \"-32.0*x + 108.0*(0.166666666666667*x + 1)  - 109.0\"\n      ]\n     },\n     \"execution_count\": 107,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"f1 = 48 * (0.25*x+1.5)**2 - 128 * (0.25*x+1.5) + 83\\n\",\n    \"f1\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 108,\n   \"metadata\": {\n    \"id\": \"VQwDN4XLt0xl\",\n    \"outputId\": \"a46d8327-06b3-4fbc-fa5d-6a1e4648a22e\"\n   },\n   \"outputs\": [\n    {\n     \"data\": {\n      \"image/png\": \"\",\n      \"text/plain\": [\n       \"<Figure size 640x480 with 1 Axes>\"\n      ]\n     },\n     \"metadata\": {},\n     \"output_type\": \"display_data\"\n    },\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"MSE = 4.412499999999996\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"print_points_ands_function1(f1)\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {\n    \"id\": \"HRrtO4Lyt0xt\"\n   },\n   \"source\": [\n    \"## 2.\\n\",\n    \"### Получите значение MSE меньшее 35.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 109,\n   \"metadata\": {\n    \"id\": \"dm_YVXYgt0xw\"\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"def print_points_ands_function2(sympy_function):\\n\",\n    \"    def function(x_): return float(sympy_function.subs(x, x_))\\n\",\n    \"    \\n\",\n    \"    points_X = np.array([-2, -1, 0, 1, 2, 3, 3.5, 4, 4.5, 5])\\n\",\n    \"    points_Y = np.array([-31, -9, 4, -1, 9, 24, 47, 92, 120, 170])\\n\",\n    \"    plt.xlim(-3, 6)\\n\",\n    \"    plt.ylim(-35, 200)\\n\",\n    \"    \\n\",\n    \"    plt.scatter(points_X, points_Y, c='r')\\n\",\n    \"    x_range = np.linspace(plt.xlim()[0], plt.xlim()[1], num=100)\\n\",\n    \"    function_Y = [function(x_) for x_ in x_range]\\n\",\n    \"    plt.plot(x_range, function_Y, 'b')\\n\",\n    \"    plt.show()\\n\",\n    \"    \\n\",\n    \"    MSE = sum([(points_Y[i] - function(points_X[i]))**2 for i in range(len(points_Y))]) / len(points_Y)\\n\",\n    \"    print(f'MSE = {MSE}')\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 132,\n   \"metadata\": {\n    \"id\": \"7LMQiJDKt0x1\",\n    \"outputId\": \"8b8d6fed-a7c9-4a8d-c9f8-9ace332dd838\"\n   },\n   \"outputs\": [\n    {\n     \"data\": {\n      \"image/png\": \"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\",\n      \"text/latex\": [\n       \"$\\\\displaystyle 59.2 x + 108 \\\\left(0.266666666666667 x - 1\\\\right)^{3} + 270 \\\\left(0.266666666666667 x - 1\\\\right)^{2} - 160$\"\n      ],\n      \"text/plain\": [\n       \"                                      3                                2      \\n\",\n       \"59.2*x + 108*(0.266666666666667*x - 1)  + 270*(0.266666666666667*x - 1)  - 160\"\n      ]\n     },\n     \"execution_count\": 132,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"f2 = 4 * (0.8*x-3)**3 + 30 * (0.8*x-3)**2 + 74 * (0.8*x-3) + 62\\n\",\n    \"f2\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 133,\n   \"metadata\": {\n    \"id\": \"SjwUXoCXt0x6\",\n    \"outputId\": \"a5e8c7e9-602e-430b-acd3-c8c5bd2b055e\"\n   },\n   \"outputs\": [\n    {\n     \"data\": {\n      \"image/png\": \"\",\n      \"text/plain\": [\n       \"<Figure size 640x480 with 1 Axes>\"\n      ]\n     },\n     \"metadata\": {},\n     \"output_type\": \"display_data\"\n    },\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"MSE = 24.893216\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"print_points_ands_function2(f2)\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {\n    \"id\": \"xYJNX-nUt0x_\"\n   },\n   \"source\": [\n    \"## 3.\\n\",\n    \"### Получите значение MSE меньшее 3300.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 134,\n   \"metadata\": {\n    \"id\": \"UNLnKjvit0yB\"\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"def print_points_ands_function3(sympy_function):\\n\",\n    \"    def function(x_): return float(sympy_function.subs(x, x_))\\n\",\n    \"    \\n\",\n    \"    points_X = np.array([-2, -1, 0, 1, 2, 3, 3.5, 4, 4.5, 5])\\n\",\n    \"    points_Y = np.array([60, 25, 4, -0, -57, -195, -295, -540, -700, -760])\\n\",\n    \"    plt.xlim(-10, 6)\\n\",\n    \"    plt.ylim(-850, 100)\\n\",\n    \"    \\n\",\n    \"    plt.scatter(points_X, points_Y, c='r')\\n\",\n    \"    x_range = np.linspace(plt.xlim()[0], plt.xlim()[1], num=100)\\n\",\n    \"    function_Y = [function(x_) for x_ in x_range]\\n\",\n    \"    plt.plot(x_range, function_Y, 'b')\\n\",\n    \"    plt.show()\\n\",\n    \"    \\n\",\n    \"    MSE = sum([(points_Y[i] - function(points_X[i]))**2 for i in range(len(points_Y))]) / len(points_Y)\\n\",\n    \"    print(f'MSE = {MSE}')\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 157,\n   \"metadata\": {\n    \"id\": \"osbCVOuIt0yH\",\n    \"outputId\": \"22bfe175-fcf5-4290-9dd1-3b2fc34ff029\"\n   },\n   \"outputs\": [\n    {\n     \"data\": {\n      \"image/png\": \"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\",\n      \"text/latex\": [\n       \"$\\\\displaystyle - 2933.7 x - 12348 \\\\left(0.0785714285714286 x - 1\\\\right)^{3} - 37044 \\\\left(0.0785714285714286 x - 1\\\\right)^{2} + 24702$\"\n      ],\n      \"text/plain\": [\n       \"                                            3                                   2        \\n\",\n       \"-2933.7*x - 12348*(0.0785714285714286*x - 1)  - 37044*(0.0785714285714286*x - 1)  + 24702\"\n      ]\n     },\n     \"execution_count\": 157,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"f3 = -36 * (0.55*x-7)**3 - 756 * (0.55*x-7)**2 - 5334 * (0.55*x-7) - 12636\\n\",\n    \"f3\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 158,\n   \"metadata\": {\n    \"id\": \"1T4lJVQPt0yR\",\n    \"outputId\": \"ab86dbbf-6fd9-42a9-f5ef-6316179ace4f\"\n   },\n   \"outputs\": [\n    {\n     \"data\": {\n      \"image/png\": \"\",\n      \"text/plain\": [\n       \"<Figure size 640x480 with 1 Axes>\"\n      ]\n     },\n     \"metadata\": {},\n     \"output_type\": \"display_data\"\n    },\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"MSE = 2320.438905394521\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"print_points_ands_function3(f3)\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {\n    \"id\": \"3jcBH1M3t0yZ\"\n   },\n   \"source\": [\n    \"## 4.\\n\",\n    \"### Получите значение MSE меньшее 25.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 159,\n   \"metadata\": {\n    \"id\": \"R4nnsc8zt0yb\"\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"def print_points_ands_function4(sympy_function):\\n\",\n    \"    def function(x_): return float(sympy_function.subs(x, x_))\\n\",\n    \"    \\n\",\n    \"    points_X = np.array([-2, -1, 0, 1, 2, 3, 3.5, 4, 4.5, 5])\\n\",\n    \"    points_Y = np.array([-42, -37, -23, -36, -45, -80, -83, -110, -131, -155])\\n\",\n    \"    plt.xlim(-4, 20)\\n\",\n    \"    plt.ylim(-160, -10)\\n\",\n    \"    \\n\",\n    \"    plt.scatter(points_X, points_Y, c='r')\\n\",\n    \"    x_range = np.linspace(plt.xlim()[0], plt.xlim()[1], num=100)\\n\",\n    \"    function_Y = [function(x_) for x_ in x_range]\\n\",\n    \"    plt.plot(x_range, function_Y, 'b')\\n\",\n    \"    plt.show()\\n\",\n    \"    \\n\",\n    \"    MSE = sum([(points_Y[i] - function(points_X[i]))**2 for i in range(len(points_Y))]) / len(points_Y)\\n\",\n    \"    print(f'MSE = {MSE}')\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 166,\n   \"metadata\": {\n    \"id\": \"Uq__GcfPt0yj\",\n    \"outputId\": \"345572d8-35a9-47c2-d7c9-4769bd8d17e7\"\n   },\n   \"outputs\": [\n    {\n     \"data\": {\n      \"image/png\": \"iVBORw0KGgoAAAANSUhEUgAAAQAAAAAVCAYAAACpHjD6AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjguMywgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/H5lhTAAAACXBIWXMAABJ0AAASdAHeZh94AAAI3klEQVR4nO2cf7BVVRXHP09eiiFRqUVjkyAl0g9FK+0HqAhiiiaoTcaAUvkrNVAgBYtZfm0UGA0emEbEDDDoRAwoTmiIPzDFSAKjiRECQQxMFEIJQ0KB/lj78M4771zeOffd+967+L4zd/a9++y97/estc7ea6+1763av38/rWhFKz6YqG5uAq1oRUuDpNHAJUBX4H/An4HRZraqWYmVAYc1N4FWtKIF4mzgfuAbwDnA+8CTkj7enKTKgarWLUBlQtJM4Hygs5n9t7n5VBIkfRlYDlxtZtMytD8K2AH0N7Pfl5tfU6LOFkDSRuD4Am3fMLOOyUpJnwbuAL4FHA28DswHZGZvlZJsOSDpMuAsoDtwCtAeeNDMBuUY42hgANAP+BJwHLAH+DswHZhuZvtS+m0kp7xDv68Cg4GR8Ye/WB4tDcXoJI8dmtkKSfOBn0uabWbvNECpPe4tN7k9S6oCrgqvLwBVwGpgGjC1kD4l9QOGAZ+nVh4rgAlmtjRql7YF2AEo5XVPypd0CYN+H1gGTAQ2hC9eGgyypeNnwI24sb1W5BjfAX4DnAG8ANQA84Av4oqaExSZhszyjuFO4D/Ar0rIoyUhl06KtMOxQEdgaAY+k4CVwNIG2pUDDwBTgU7Ab3E9fhjX/Yy0DpLGAwuA04CFOP8XgYuB5yUdmEjTgoBvm9ntGcndD3wCGGpm98YITABuxg31uoxjNRduBjYDL+OrzuIixlgLfBt4ND4jS7oNN8hL8aDSvJS+eeSNpBOBPsA0M3u3hDxKBklDcI+jl5k9U8QQeXWS2w7NbJmkNcC1ksYdZCWdAPQAepjZ3rw30hhZSBoADAReAU43s22h/nBch4MlzTezh2J9OgIjgTeAk83szdi1XsDTuKf0ADQiCxBm3b7ARuC+xGUDrgkERyTc1EXAucBlZjYvVl+FC+pKYLyZjSqWWx6Y2QHjklTsGE8XqN8iaQpugGdTmgfvB7gb+LtS8Ghp+gh8M+ukWDsMmA3cjt//4yljTwQuxx/eDbluojQYEMpfRA8/gJntkTQGuBD3lB6K9Tke9+xfiD/8od9iSTuBY6O6tC3AEZIGSbpN0jBJvSS1SWnXK5SLkrOnme0Ensddla8l+v0E2Ifvv+Lj3oMb29SmNLYmwHuhfL/A9azyjtAH2IunpkrBo9L1UawdEq6BTwB1IGkS8D3gHDNbUzq6uRDFgNImn6iuZ/AIIqzD4z6nSzom3kHSmXg848moLm0C6AjMwleLGtxlWCfprES7rqFcW4D8ulCeGK80s7+F8bvhgazIRR0OzAF+VGC8ioOkauCK8HFhgWZZ5Y2kdvi+eHWeyP/BeBwC+ijKDgP+Esoz45WS7sPjCQOBtyR1DK+jGks2J6JVv3PKtRNCWR17j5ltB24FPgm8JGmqpLGS5gCLgCeAa6P2yQlgOtAbN8p2eCT513gA4g+STom17RDKHQXIR/UfTbk2BtgNmKQbceN/HBhcCVHqHBiHB+AeM7N6Lib55A0e1W+DR3RLyaOS9VG0HZrZDvy+P5O4dD2+Uj6Fyzp6jWwk17x4NJTD42cQJH0IDxRH+Fi8k5nV4LGeauBqYBQeIN4EzIhvDaoTHZMbrlXAdZLeAUbg+6UBNBJmtklSTSB2L/An4BIz29NQ3wZSZ2nIldIrFSQNxWW2hrCyJlGEvKNoduZ0VEYe5dLH4pQ9/EwzG5KFexNhO75aHoCZFZUpKYMsZuM6Ow9fzR/BJ6w+wKeAf+KTV51JWtItwF3AZOCXwBbgJDzz8aCk7mZ2C2QPAk7BjSjuKkUza4f6zevUv13g+tbY+x+a2a6MXNbjQsiKf+VoWxKEVXQS8BLQO7hleZAmb4Ao6t+2DDyK1UcN9VfX7njKaSYenItjZcZxs6KxdngktXJtLGoooSzMbK+ki/Dt2CA8JrMbeAbP6MwNTeOR/rOB8cDDZjY8NtyLIauwFhghaYqZbcg6AUTG0S5W949Qpu2tAD4Xynp7M0kD8SDTFtz9HUbGvaaZ9c7Srrkg6SY8D70Kf+jePHiPVKTJG2oV3eD5ijw8GqmPmpTxhuBGP6PINGAeNMYOD8Mf2FdKQaQcsjCz9/AHenxi3Lb4vW0zszj/C0NZL3VqZrskLcO9ylOBDVl/CxBFUOPRyOgL+gZBxsm1B74J7CIRrZZ0AX6AYRVwMq7AqyR1pcIh6Vb8oVuJp46KefghXd7g+9Ct1Aa+Gs3jENBHUXYY0BVPqa4sJ8Ey4XLgcPxwUBxHhPJY0hHV74FYEFBStxBlrgNJnfB9BITDAwBmth6PKnYCbkh2w1evWYkzAD1wt2UzcJ6ZbcVPfVWTmOFaMiR1kXRSCMZEdWPwYNsKfMXdVnAA8ssbwMz2A88Cx0j6bIFxM/M4FPRRjB3GEE20xRz+ahJI+khKXXfgbjwWNC5x+blQXiPpuES/8/EJcTce56kTA/guvjd4FngV2Al0wc+VtwUeo/7x1OvDQJMl9cbPKJ+B52bXAj9NkF6A79nONbPXAcxsrqTlwMWSeprZczQhJPUH+oePUd7165JmhPfbzCwZ/X0KD/Z0BjZKuhI/XbUXV8DQlIDPRjObEftcjLzBD/FcigeGXk7cS2YeLVUfUJROMtthAn1xWT1SKu5lwBOS3sU9tJ14urYfHre4yMySMa65eJ6/D7Ba0sP41q4bvj2oAkaZ2b+h7gSwGHeJTsVniXZ44GQJnieeFVagAzCz9ZK+Qu2PMC7A3dRJxH6EEVarhcB+fKVZnyA9Gs9P3k36gY1yojseXInjBGpzq6/ScPonytO2AW4q0OaP1D27nVveAfPwWMAV1D/5lomHpCW0XH1ATp1ktcM4JHXAJ5kFZrapxPxLibm4uz8ID1i+hv82YKyZbU42NrN9YVt3Q+g3AD8ItR1fVCab2aKofevPgSsQ8j+suAs4zcz+2tx8KhGSfoynyXqa2ZLm5tNcaP1DkMrERDwHfEdzE6lESDoS93LmfZAffmidACoSZrYbPyCyPC2Q2IoG0Ql3o5v6ZF+Lw/8BLjg0B3/aJYIAAAAASUVORK5CYII=\",\n      \"text/latex\": [\n       \"$\\\\displaystyle 50 x - 1.25 \\\\left(2 x + 10\\\\right)^{2} + 98$\"\n      ],\n      \"text/plain\": [\n       \"                      2     \\n\",\n       \"50*x - 1.25*(2*x + 10)  + 98\"\n      ]\n     },\n     \"execution_count\": 166,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"f4 = - 5 / 4 * (2*x+10)**2 + 25 * (2*x+10) - 152\\n\",\n    \"f4\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 167,\n   \"metadata\": {\n    \"id\": \"Muwpsp8tt0yp\",\n    \"outputId\": \"99828dab-4bd6-434b-fdc9-ee8fa9113858\"\n   },\n   \"outputs\": [\n    {\n     \"data\": {\n      \"image/png\": \"\",\n      \"text/plain\": [\n       \"<Figure size 640x480 with 1 Axes>\"\n      ]\n     },\n     \"metadata\": {},\n     \"output_type\": \"display_data\"\n    },\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"MSE = 20.3125\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"print_points_ands_function4(f4)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {\n    \"id\": \"oTNLmWfDt0yt\"\n   },\n   \"outputs\": [],\n   \"source\": []\n  }\n ],\n \"metadata\": {\n  \"colab\": {\n   \"collapsed_sections\": [],\n   \"name\": \"Аппроксимация и преобразования функций. Домашнее задание.ipynb\",\n   \"provenance\": []\n  },\n  \"kernelspec\": {\n   \"display_name\": \"Python 3 (ipykernel)\",\n   \"language\": \"python\",\n   \"name\": \"python3\"\n  },\n  \"language_info\": {\n   \"codemirror_mode\": {\n    \"name\": \"ipython\",\n    \"version\": 3\n   },\n   \"file_extension\": \".py\",\n   \"mimetype\": \"text/x-python\",\n   \"name\": \"python\",\n   \"nbconvert_exporter\": \"python\",\n   \"pygments_lexer\": \"ipython3\",\n   \"version\": \"3.11.7\"\n  }\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 4\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/SymPyLearn/3.4.ipynb b/SymPyLearn/3.4.ipynb
--- a/SymPyLearn/3.4.ipynb	(revision 5abcc0366c99590901efb046fd233a0e6912b4c8)
+++ b/SymPyLearn/3.4.ipynb	(date 1710344730331)
@@ -15,14 +15,14 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 4,
+   "execution_count": 1,
    "metadata": {
     "id": "mO8e_U97uxvk"
    },
    "outputs": [],
    "source": [
     "from sympy import *\n",
-    "# import matplotlib.pyplot as plt\n",
+    "import matplotlib.pyplot as plt\n",
     "import numpy as np\n",
     "\n",
     "a0, a1, a2, a3, a4, a5 = symbols('a0, a1, a2, a3, a4, a5')\n",
@@ -31,7 +31,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 5,
+   "execution_count": 2,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -55,7 +55,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 6,
+   "execution_count": 3,
    "metadata": {
     "id": "mO8e_U97uxvk"
    },
@@ -71,7 +71,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 7,
+   "execution_count": 4,
    "metadata": {},
    "outputs": [
     {
@@ -83,7 +83,7 @@
        "{(0, 3, 0, 19, 0, -5)}"
       ]
      },
-     "execution_count": 7,
+     "execution_count": 4,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -94,7 +94,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 8,
+   "execution_count": 5,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -103,7 +103,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 9,
+   "execution_count": 6,
    "metadata": {},
    "outputs": [
     {
@@ -115,7 +115,7 @@
        "3*x**5 + 19*x**3 - 5*x"
       ]
      },
-     "execution_count": 9,
+     "execution_count": 6,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -126,19 +126,24 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 10,
+   "execution_count": 7,
    "metadata": {},
    "outputs": [
     {
-     "ename": "NameError",
-     "evalue": "name 'plt' is not defined",
-     "output_type": "error",
-     "traceback": [
-      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
-      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
-      "Cell \u001b[0;32mIn[10], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m \u001b[43mprint_points_ands_function1\u001b[49m\u001b[43m(\u001b[49m\u001b[43mf1\u001b[49m\u001b[43m)\u001b[49m\n",
-      "Cell \u001b[0;32mIn[5], line 6\u001b[0m, in \u001b[0;36mprint_points_ands_function1\u001b[0;34m(sympy_function)\u001b[0m\n\u001b[1;32m      4\u001b[0m points_X \u001b[38;5;241m=\u001b[39m np\u001b[38;5;241m.\u001b[39marray([\u001b[38;5;241m-\u001b[39m\u001b[38;5;241m4\u001b[39m, \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m3\u001b[39m, \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m1\u001b[39m, \u001b[38;5;241m1\u001b[39m, \u001b[38;5;241m3\u001b[39m, \u001b[38;5;241m4\u001b[39m])\n\u001b[1;32m      5\u001b[0m points_Y \u001b[38;5;241m=\u001b[39m np\u001b[38;5;241m.\u001b[39marray([\u001b[38;5;241m-\u001b[39m\u001b[38;5;241m4268\u001b[39m, \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m1227\u001b[39m, \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m17\u001b[39m, \u001b[38;5;241m17\u001b[39m, \u001b[38;5;241m1227\u001b[39m, \u001b[38;5;241m4268\u001b[39m])\n\u001b[0;32m----> 6\u001b[0m \u001b[43mplt\u001b[49m\u001b[38;5;241m.\u001b[39mylim(\u001b[38;5;241m-\u001b[39m\u001b[38;5;241m5000\u001b[39m, \u001b[38;5;241m5000\u001b[39m)\n\u001b[1;32m      7\u001b[0m plt\u001b[38;5;241m.\u001b[39mxlim(\u001b[38;5;241m-\u001b[39m\u001b[38;5;241m5\u001b[39m, \u001b[38;5;241m5\u001b[39m)\n\u001b[1;32m      9\u001b[0m plt\u001b[38;5;241m.\u001b[39mscatter(points_X, points_Y, c\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mr\u001b[39m\u001b[38;5;124m'\u001b[39m)\n",
-      "\u001b[0;31mNameError\u001b[0m: name 'plt' is not defined"
+     "data": {
+      "image/png": "",
+      "text/plain": [
+       "<Figure size 640x480 with 1 Axes>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "MSE = 0.0\n"
      ]
     }
    ],
@@ -148,7 +153,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 11,
+   "execution_count": 8,
    "metadata": {},
    "outputs": [
     {
@@ -161,7 +166,7 @@
        " sqrt(-19/6 + sqrt(421)/6)]"
       ]
      },
-     "execution_count": 11,
+     "execution_count": 8,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -172,7 +177,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 12,
+   "execution_count": 9,
    "metadata": {},
    "outputs": [
     {
@@ -184,7 +189,7 @@
        "((x < oo) & (sqrt(-19/6 + sqrt(421)/6) < x)) | ((x < 0) & (-sqrt(-19/6 + sqrt(421)/6) < x))"
       ]
      },
-     "execution_count": 12,
+     "execution_count": 9,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -195,7 +200,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 13,
+   "execution_count": 10,
    "metadata": {},
    "outputs": [
     {
@@ -207,7 +212,7 @@
        "((0 < x) & (x < sqrt(-19/6 + sqrt(421)/6))) | ((-oo < x) & (x < -sqrt(-19/6 + sqrt(421)/6)))"
       ]
      },
-     "execution_count": 13,
+     "execution_count": 10,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -225,7 +230,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 14,
+   "execution_count": 11,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -249,7 +254,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 15,
+   "execution_count": 12,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -263,7 +268,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 16,
+   "execution_count": 13,
    "metadata": {},
    "outputs": [
     {
@@ -275,7 +280,7 @@
        "{(1/48, 16, -13/24, 7, 169/48, -25)}"
       ]
      },
-     "execution_count": 16,
+     "execution_count": 13,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -286,7 +291,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 18,
+   "execution_count": 14,
    "metadata": {},
    "outputs": [
     {
@@ -298,7 +303,7 @@
        "0.0208333333333333*x**6 + 16*x**5 - 0.541666666666667*x**4 + 7*x**3 + 3.52083333333333*x**2 - 25*x"
       ]
      },
-     "execution_count": 18,
+     "execution_count": 14,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -310,19 +315,24 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 19,
+   "execution_count": 15,
    "metadata": {},
    "outputs": [
     {
-     "ename": "NameError",
-     "evalue": "name 'plt' is not defined",
-     "output_type": "error",
-     "traceback": [
-      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
-      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
-      "Cell \u001b[0;32mIn[19], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m \u001b[43mprint_points_ands_function1\u001b[49m\u001b[43m(\u001b[49m\u001b[43mf2\u001b[49m\u001b[43m)\u001b[49m\n",
-      "Cell \u001b[0;32mIn[14], line 6\u001b[0m, in \u001b[0;36mprint_points_ands_function1\u001b[0;34m(sympy_function)\u001b[0m\n\u001b[1;32m      4\u001b[0m points_X \u001b[38;5;241m=\u001b[39m np\u001b[38;5;241m.\u001b[39marray([\u001b[38;5;241m-\u001b[39m\u001b[38;5;241m4\u001b[39m, \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m3\u001b[39m, \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m1\u001b[39m, \u001b[38;5;241m1\u001b[39m, \u001b[38;5;241m3\u001b[39m, \u001b[38;5;241m4\u001b[39m])\n\u001b[1;32m      5\u001b[0m points_Y \u001b[38;5;241m=\u001b[39m np\u001b[38;5;241m.\u001b[39marray([\u001b[38;5;241m-\u001b[39m\u001b[38;5;241m16729\u001b[39m, \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m3999\u001b[39m, \u001b[38;5;241m5\u001b[39m, \u001b[38;5;241m1\u001b[39m, \u001b[38;5;241m4005\u001b[39m, \u001b[38;5;241m16735\u001b[39m])\n\u001b[0;32m----> 6\u001b[0m \u001b[43mplt\u001b[49m\u001b[38;5;241m.\u001b[39mylim(\u001b[38;5;241m-\u001b[39m\u001b[38;5;241m5000\u001b[39m, \u001b[38;5;241m5000\u001b[39m)\n\u001b[1;32m      7\u001b[0m plt\u001b[38;5;241m.\u001b[39mxlim(\u001b[38;5;241m-\u001b[39m\u001b[38;5;241m5\u001b[39m, \u001b[38;5;241m5\u001b[39m)\n\u001b[1;32m      9\u001b[0m plt\u001b[38;5;241m.\u001b[39mscatter(points_X, points_Y, c\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mr\u001b[39m\u001b[38;5;124m'\u001b[39m)\n",
-      "\u001b[0;31mNameError\u001b[0m: name 'plt' is not defined"
+     "data": {
+      "image/png": "",
+      "text/plain": [
+       "<Figure size 640x480 with 1 Axes>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "MSE = 4.411629933616147e-24\n"
      ]
     }
    ],
@@ -864,7 +874,7 @@
    "name": "python",
    "nbconvert_exporter": "python",
    "pygments_lexer": "ipython3",
-   "version": "3.11.7"
+   "version": "3.12.2"
   }
  },
  "nbformat": 4,
Index: SymPyLearn/1.1.ipynb
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\n \"cells\": [\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {\n    \"id\": \"SHUWJIC_kPpn\"\n   },\n   \"source\": [\n    \"## Понятие функции. Построение графиков функций с помощью SymPy. \\n\",\n    \"## Практика\\n\",\n    \"\\n\",\n    \"\\n\",\n    \"**(1)** Импортируйте библиотеку и модуль `plot`, вызовите команду для красивой отрисовки формул. Затем, создав переменную, создайте функцию $f(x)=-3x+5$ и постройте ее график. Найдите значения этой функции для значений $x=\\\\frac{5}{3}$ и $x=2$.\\n\",\n    \" <br>\\n\",\n    \" <br>\\n\",\n    \"Проделайте тоже самое для следующих функций и их точек, с некоторыми из них мы встретимся в будущем и разберем их более подробно, но уже сейчас можно посмотреть на их графики: <br>\\n\",\n    \"**(2)** $f(x)=3x^2+3x-6$. Найдите значения функции при $x=0.5$ и $x=7$. <br>\\n\",\n    \"**(3)** $f(x)=2x^4+x^3-6x^2+7x+1$. Найдите значения функции при $x=3$ и $x=–5$. <br>\\n\",\n    \"**(4)** $f(x)=(x^2)^x$. Найдите значения функции при $x=0$, $х=10$. <br>\\n\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 4,\n   \"metadata\": {\n    \"id\": \"JayIlulPkXgb\"\n   },\n   \"outputs\": [\n    {\n     \"ename\": \"ModuleNotFoundError\",\n     \"evalue\": \"No module named 'matplotlib'\",\n     \"output_type\": \"error\",\n     \"traceback\": [\n      \"\\u001b[0;31m---------------------------------------------------------------------------\\u001b[0m\",\n      \"\\u001b[0;31mModuleNotFoundError\\u001b[0m                       Traceback (most recent call last)\",\n      \"Cell \\u001b[0;32mIn[4], line 3\\u001b[0m\\n\\u001b[1;32m      1\\u001b[0m \\u001b[38;5;28;01mfrom\\u001b[39;00m \\u001b[38;5;21;01msympy\\u001b[39;00m \\u001b[38;5;28;01mimport\\u001b[39;00m \\u001b[38;5;241m*\\u001b[39m\\n\\u001b[1;32m      2\\u001b[0m \\u001b[38;5;28;01mfrom\\u001b[39;00m \\u001b[38;5;21;01msympy\\u001b[39;00m\\u001b[38;5;21;01m.\\u001b[39;00m\\u001b[38;5;21;01mplotting\\u001b[39;00m \\u001b[38;5;28;01mimport\\u001b[39;00m plot\\n\\u001b[0;32m----> 3\\u001b[0m \\u001b[38;5;28;01mfrom\\u001b[39;00m \\u001b[38;5;21;01mmatplotlib\\u001b[39;00m \\u001b[38;5;28;01mimport\\u001b[39;00m \\u001b[38;5;241m*\\u001b[39m\\n\",\n      \"\\u001b[0;31mModuleNotFoundError\\u001b[0m: No module named 'matplotlib'\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"from sympy import *\\n\",\n    \"from sympy.plotting import plot\\n\",\n    \"from matplotlib import *\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 2,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/latex\": [\n       \"$\\\\displaystyle 5 - 3 x$\"\n      ],\n      \"text/plain\": [\n       \"5 - 3*x\"\n      ]\n     },\n     \"execution_count\": 2,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"init_printing(use_unicode=False, wrap_line=False, no_global=True)\\n\",\n    \"x=Symbol('x')\\n\",\n    \"f=-3*x+5\\n\",\n    \"f\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 3,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"     35 |..                                                     \\n\",\n      \"        |  ...                                                  \\n\",\n      \"        |     ..                                                \\n\",\n      \"        |       ...                                             \\n\",\n      \"        |          ...                                          \\n\",\n      \"        |             ..                                        \\n\",\n      \"        |               ...                                     \\n\",\n      \"        |                  ...                                  \\n\",\n      \"        |                     ..                                \\n\",\n      \"        |                       ...                             \\n\",\n      \"      5 |--------------------------...--------------------------\\n\",\n      \"        |                             ...                       \\n\",\n      \"        |                                ..                     \\n\",\n      \"        |                                  ...                  \\n\",\n      \"        |                                     ...               \\n\",\n      \"        |                                        ..             \\n\",\n      \"        |                                          ...          \\n\",\n      \"        |                                             ...       \\n\",\n      \"        |                                                ..     \\n\",\n      \"        |                                                  ...  \\n\",\n      \"    -25 |_______________________________________________________\\n\",\n      \"         -10                        0                          10\\n\"\n     ]\n    },\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"<sympy.plotting.plot.Plot at 0x7f9da16d2910>\"\n      ]\n     },\n     \"execution_count\": 3,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"plot(f)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 6,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/latex\": [\n       \"$\\\\displaystyle 0$\"\n      ],\n      \"text/plain\": [\n       \"0\"\n      ]\n     },\n     \"execution_count\": 6,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"f.subs(x, 5/3)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 7,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/latex\": [\n       \"$\\\\displaystyle -1$\"\n      ],\n      \"text/plain\": [\n       \"-1\"\n      ]\n     },\n     \"execution_count\": 7,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"f.subs(x, 2)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 11,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"    320 |                                                      /\\n\",\n      \"        |                                                     / \\n\",\n      \"        |                                                    .  \\n\",\n      \"        |.                                                      \\n\",\n      \"        |                                                   .   \\n\",\n      \"        | .                                                /    \\n\",\n      \"        |  \\\\                                              /     \\n\",\n      \"        |   \\\\                                            /      \\n\",\n      \"        |    \\\\                                          /       \\n\",\n      \"        |     \\\\                                        /        \\n\",\n      \"    155 |------\\\\--------------------------------------/---------\\n\",\n      \"        |       \\\\                                    /          \\n\",\n      \"        |        \\\\                                  /           \\n\",\n      \"        |         \\\\                                /            \\n\",\n      \"        |          ..                             /             \\n\",\n      \"        |            \\\\                          ..              \\n\",\n      \"        |             ..                       /                \\n\",\n      \"        |               ..                   ..                 \\n\",\n      \"        |                 ..              ...                   \\n\",\n      \"        |                   ....       ...                      \\n\",\n      \"    -10 |_______________________________________________________\\n\",\n      \"         -10                        0                          10\\n\"\n     ]\n    },\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"<sympy.plotting.plot.Plot at 0x7f6716d5a490>\"\n      ]\n     },\n     \"execution_count\": 11,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"f1 = 3*x**2 + 3*x -6\\n\",\n    \"plot(f1)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 15,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/latex\": [\n       \"$\\\\displaystyle -3.75$\"\n      ],\n      \"text/plain\": [\n       \"-3.75000000000000\"\n      ]\n     },\n     \"execution_count\": 15,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"f1.subs(x, 0.5)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 17,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/latex\": [\n       \"$\\\\displaystyle 162$\"\n      ],\n      \"text/plain\": [\n       \"162\"\n      ]\n     },\n     \"execution_count\": 17,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"f1.subs(x, 7)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 21,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"  20000 |                                                      .\\n\",\n      \"        |                                                       \\n\",\n      \"        |.                                                    . \\n\",\n      \"        |                                                       \\n\",\n      \"        | .                                                     \\n\",\n      \"        |                                                    .  \\n\",\n      \"        |                                                       \\n\",\n      \"        |  .                                                .   \\n\",\n      \"        |                                                       \\n\",\n      \"        |   .                                              .    \\n\",\n      \"  10000 |-------------------------------------------------------\\n\",\n      \"        |    .                                            .     \\n\",\n      \"        |     .                                                 \\n\",\n      \"        |                                                .      \\n\",\n      \"        |      .                                        /       \\n\",\n      \"        |       \\\\                                      /        \\n\",\n      \"        |        \\\\                                    /         \\n\",\n      \"        |         ..                                ..          \\n\",\n      \"        |           ..                             /            \\n\",\n      \"        |             ...                      ....             \\n\",\n      \"      0 |_______________________________________________________\\n\",\n      \"         -10                        0                          10\\n\"\n     ]\n    },\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"<sympy.plotting.plot.Plot at 0x7f671c089690>\"\n      ]\n     },\n     \"execution_count\": 21,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"f2 = 2*x**4+x**3-6*x**2+7*x+1\\n\",\n    \"plot(f2)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 22,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/latex\": [\n       \"$\\\\displaystyle 157$\"\n      ],\n      \"text/plain\": [\n       \"157\"\n      ]\n     },\n     \"execution_count\": 22,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"f2.subs(x, 3)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 23,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/latex\": [\n       \"$\\\\displaystyle 941$\"\n      ],\n      \"text/plain\": [\n       \"941\"\n      ]\n     },\n     \"execution_count\": 23,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"f2.subs(x, -5)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 26,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"  1e+20 |                                                      .\\n\",\n      \"        |                                                       \\n\",\n      \"        |                                                       \\n\",\n      \"        |                                                       \\n\",\n      \"        |                                                       \\n\",\n      \"        |                                                       \\n\",\n      \"        |                                                       \\n\",\n      \"        |                                                       \\n\",\n      \"        |                                                       \\n\",\n      \"        |                                                       \\n\",\n      \"  5e+19 |-------------------------------------------------------\\n\",\n      \"        |                                                       \\n\",\n      \"        |                                                       \\n\",\n      \"        |                                                       \\n\",\n      \"        |                                                       \\n\",\n      \"        |                                                       \\n\",\n      \"        |                                                       \\n\",\n      \"        |                                                       \\n\",\n      \"        |                                                     . \\n\",\n      \"        |                                                       \\n\",\n      \"      0 |_______________________________________________________\\n\",\n      \"         -10                        0                          10\\n\"\n     ]\n    },\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"<sympy.plotting.plot.Plot at 0x7f6716def4d0>\"\n      ]\n     },\n     \"execution_count\": 26,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"f3 = (x**2)**x\\n\",\n    \"plot(f3)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 27,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/latex\": [\n       \"$\\\\displaystyle 1$\"\n      ],\n      \"text/plain\": [\n       \"1\"\n      ]\n     },\n     \"execution_count\": 27,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"f3.subs(x, 0)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 28,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/latex\": [\n       \"$\\\\displaystyle 100000000000000000000$\"\n      ],\n      \"text/plain\": [\n       \"100000000000000000000\"\n      ]\n     },\n     \"execution_count\": 28,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"f3.subs(x, 10)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": []\n  }\n ],\n \"metadata\": {\n  \"colab\": {\n   \"collapsed_sections\": [],\n   \"name\": \"practice_les-2.ipynb\",\n   \"provenance\": []\n  },\n  \"kernelspec\": {\n   \"display_name\": \"Python 3 (ipykernel)\",\n   \"language\": \"python\",\n   \"name\": \"python3\"\n  },\n  \"language_info\": {\n   \"codemirror_mode\": {\n    \"name\": \"ipython\",\n    \"version\": 3\n   },\n   \"file_extension\": \".py\",\n   \"mimetype\": \"text/x-python\",\n   \"name\": \"python\",\n   \"nbconvert_exporter\": \"python\",\n   \"pygments_lexer\": \"ipython3\",\n   \"version\": \"3.12.1\"\n  }\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 4\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/SymPyLearn/1.1.ipynb b/SymPyLearn/1.1.ipynb
--- a/SymPyLearn/1.1.ipynb	(revision 5abcc0366c99590901efb046fd233a0e6912b4c8)
+++ b/SymPyLearn/1.1.ipynb	(date 1710344248775)
@@ -478,7 +478,7 @@
    "name": "python",
    "nbconvert_exporter": "python",
    "pygments_lexer": "ipython3",
-   "version": "3.12.1"
+   "version": "3.12.2"
   }
  },
  "nbformat": 4,
Index: SymPyLearn/3.3.ipynb
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\n \"cells\": [\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 3,\n   \"metadata\": {\n    \"id\": \"GhDqNSrW00RX\"\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"from sympy import *\\n\",\n    \"from sympy.plotting import plot\\n\",\n    \"init_printing(use_unicode=False, wrap_line=False, no_global=True)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 4,\n   \"metadata\": {\n    \"id\": \"syfMcaLz00Rc\"\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"import matplotlib.pyplot as plt\\n\",\n    \"import numpy as np\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 5,\n   \"metadata\": {\n    \"id\": \"MR2rPb8B00Re\"\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"x = Symbol('x')\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {\n    \"id\": \"5cKINB1Y00Rf\"\n   },\n   \"source\": [\n    \"## 1.\\n\",\n    \"### Получите значение MSE меньшее 50.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 6,\n   \"metadata\": {\n    \"id\": \"9Xhx5RLX00Rj\"\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"def print_points_ands_function1(sympy_function):\\n\",\n    \"    def function(x_): return float(sympy_function.subs(x, x_))\\n\",\n    \"    \\n\",\n    \"    points_X = np.array([-2, -1, 0, 1, 2, 3, 3.5, 4, 4.5, 5])\\n\",\n    \"    points_Y = np.array([-15, -1, 4, -9, -2, -5, -8, 4, 13, 21])\\n\",\n    \"    plt.xlim(-3, 6)\\n\",\n    \"    plt.ylim(-20, 20)\\n\",\n    \"    \\n\",\n    \"    plt.scatter(points_X, points_Y, c='r')\\n\",\n    \"    x_range = np.linspace(plt.xlim()[0], plt.xlim()[1], num=100)\\n\",\n    \"    function_Y = [function(x_) for x_ in x_range]\\n\",\n    \"    plt.plot(x_range, function_Y, 'b')\\n\",\n    \"    plt.show()\\n\",\n    \"    \\n\",\n    \"    MSE = sum([(points_Y[i] - function(points_X[i]))**2 for i in range(len(points_Y))]) / len(points_Y)\\n\",\n    \"    print(f'MSE = {MSE}')\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 11,\n   \"metadata\": {\n    \"id\": \"I-f3vrX900Rk\",\n    \"outputId\": \"11d26814-9e5a-469b-aea9-261a77ccd602\"\n   },\n   \"outputs\": [\n    {\n     \"data\": {\n      \"image/png\": \"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\",\n      \"text/latex\": [\n       \"$\\\\displaystyle 1.157625 x^{3} - 4.41 x^{2}$\"\n      ],\n      \"text/plain\": [\n       \"          3         2\\n\",\n       \"1.157625*x  - 4.41*x \"\n      ]\n     },\n     \"execution_count\": 11,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"f1 = 3.375 * (0.7*x) ** 3 - 9 *(0.7*x)**2\\n\",\n    \"f1\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 12,\n   \"metadata\": {\n    \"id\": \"YcQb4OT_00Rl\",\n    \"outputId\": \"558dcbc9-f30c-42a9-822b-dfdee373174a\",\n    \"scrolled\": true\n   },\n   \"outputs\": [\n    {\n     \"data\": {\n      \"image/png\": \"\",\n      \"text/plain\": [\n       \"<Figure size 640x480 with 1 Axes>\"\n      ]\n     },\n     \"metadata\": {},\n     \"output_type\": \"display_data\"\n    },\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"MSE = 46.841444927001895\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"print_points_ands_function1(f1)\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {\n    \"id\": \"0oqHryGB00Rm\"\n   },\n   \"source\": [\n    \"## 2.\\n\",\n    \"### Получите значение MSE меньшее 150.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 15,\n   \"metadata\": {\n    \"id\": \"HtDUspL-00Rn\"\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"def print_points_ands_function2(sympy_function):\\n\",\n    \"    def function(x_): return float(sympy_function.subs(x, x_))\\n\",\n    \"    \\n\",\n    \"    points_X = np.array([-3, -2, -1, 1, 2, 3])\\n\",\n    \"    points_Y = np.array([-55, -40, 7, 5, 38, 53])\\n\",\n    \"    plt.xlim(-10, 10)\\n\",\n    \"    plt.ylim(-70, 70)\\n\",\n    \"    \\n\",\n    \"    plt.scatter(points_X, points_Y, c='r')\\n\",\n    \"    x_range = np.linspace(plt.xlim()[0], plt.xlim()[1], num=100)\\n\",\n    \"    function_Y = [function(x_) for x_ in x_range]\\n\",\n    \"    plt.plot(x_range, function_Y, 'b')\\n\",\n    \"    plt.show()\\n\",\n    \"    \\n\",\n    \"    MSE = sum([(points_Y[i] - function(points_X[i]))**2 for i in range(len(points_Y))]) / len(points_Y)\\n\",\n    \"    print(f'MSE = {MSE}')\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 18,\n   \"metadata\": {\n    \"id\": \"OEtOmOeU00Ro\",\n    \"outputId\": \"1ffd2fe8-b589-44c3-fbf4-3e555fce6955\"\n   },\n   \"outputs\": [\n    {\n     \"data\": {\n      \"image/png\": \"iVBORw0KGgoAAAANSUhEUgAAAQIAAAAUCAYAAABmtzNiAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjguMywgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/H5lhTAAAACXBIWXMAABJ0AAASdAHeZh94AAAIOklEQVR4nO2ce7BVdRXHP5dMnRBJJaWXKVdBNPHW+KrQQBSTRwLiZAyMOD5TJxJIgXSWX82E0fDiK2R0vERMTYNC4zPUMN86SmaEgiEaFmKAMhCQpfTH+m3Yd99zuGfv8+RyvjNn9uX3W/u31/qtvdder03Dtm3bqKOOOnZv7FFtBmoZki4DLgYOCUN/BX5qZg9VjakODEmTgRFAL+A/wAvAZDNbUlXGdgN0qjYDNY53gauArwPHAn8AFkjqU1WuOi76AXcC3wROAf4HPC5p/2oytTugoR4apIOk9fhb6q5q89LRIWkfYAMwzMweqDY/HRmtQgNJI4FvA03AMUAXYK6ZjU67sKQG4ILwOwpoAF4H7gZmmdknxdDHzhsMjAOOBA4AVgOvANPN7Pm0fO9Enk8BZwP7AM+Vat2UPHwJuA74DjtkXQDIzD5IuVZF9FMkuuBeayrZSgFJ03AvsCfQDdgCvIPv9+1mtq7SPKWFpLeBr+SZXmNm3aN/JEODq4HLcUPwjyL5+BUwC4+vf43fMJ8BfgG0lIA+UtaDuOv+KDADWAycCTwrKbUBy3GNoyVtwmPWmcBwM/tLsetm4KMRN3DnAS8BtwBv4UbweUkHpFyy7PopAWYArwIlM+gpcAXQGXgs8DEXD1WuBV6T9OUq8JQFGwDl+N0cJ0omC6/A4+K/4Z7BoixXljQcGAWsBI43s7VhfE/gPmCMpAVmdn8W+jDXHZgIrAH6mNn7sbn+eDx/HX4DF4NluGHsCowEZkvqV4UE1p3AgcAPzey2aFDSdFxvNwCXFLJQJfRTLIJcfYG+ZvZxhvPHAvcC/c3syQws7GtmW3OsewMwBZgMXJph3YJRAhkAPjSza9sjamUIzGz7gy8p43UBGB6OP49umrD+R5KuAYbgnsf9GenBXZ5OwItxIxDJIWkj8LkkY5IWAqcBI83svth4A77p5wLTzGxSxANuGAFekXQc/uCdX+hmFIvgDQwE3gbuSEwbcBH+ME4ws38XsGQl9JN6r2PztwDn4A/AWwXIU3LkMgIBv8UNweHxwayy1grKVTWIYo9cSozGTgpvlCz0AG8CHwHHS+oWP0HSyXh8+XiO9X4MfAJcH+L+CDfjyprVjrI6AXvtZL4c6B+OC5OxuJltBJ7F3fQTC1yvEvqBDHstaQbwfeAUM3ujXUkqj6Hh+FpivNj7qlzYS9JoSVMkjZPUP8EfUL4+guitcWiOuR6xa/cA3shAj5mtl3QVMB1YKmkBsA5oBL6Lx3YXJxczsz9LmoMrZwzQImkKMB639j+IaCVNBR4CVuGGZRRe4hq8M+HLgF7huDzP/Ju4x9ATeKKA9cquH0i31wCS7gh0w4APQvgHsMnMNhUgV8khaSKeIO6KJw/74kZgapwurawVRHdgTmJspaTzzOyP0UC5PIKo4WZ8vAYs6dN4oiLCfhnpATCzZrwBZQ/gQmASntlfBbQkQ4YYrgG2Aibpcjy+/j0wJvHG7Y7nGJbhD9hxwBlm9kheycuDruG4Ic98NP7ZAteriH4CCt1r8Ji7C77Xq2O/iQXKVQ5MxMOvH+FG4FFgoJn9KwdtGlkrgXuBAfh93Bk4GrgLT/g+IumYiLBcHsFvcKt4Ov62/h2+QacCnwf+DhyMu1JZ6AGQdCXwM+BW4HbgPeAI4EZgrqQmM7syyZyZrZLUjBuO2/By4IiQD4jTjc26Ae2UbnIhU5k2IyqiHyh8rwNtQxZh2tnrRTnyXbML1W1UYpN0EN7oNBX4k6QhZrY4QVuwrJWQwcySJy0BLglVsAl4BWQ4lMkQmNnHkobibtFo3F3aCjwJnAXMC6TvZ6EHkNQPmAbMN7PxscsvDlnu5cAESTPzJJziFv18M9ucUdx8WIHLUCj+uZO56I3fNc98NP5hIReqhH4SKPdeN9PWG2rCy8iz8SRrHK+mvYCZrQHmS1qM31u/BL6agzSrrM2UWYYYZuKG4ORooGzfGpjZf/EHdVp8XNLeeMZ1rZmtzEqPZ6ohR4nTzDZLegm3dl8jkeSSNApP4ryHu03jKHEMZ2YDSrjcsnDsmWc+ymDnyyG0QQX0E81XYq+bc1x3LP4QtRRRest1rXckLQWaJHWLV1GKkbWSMrDDWHWOBqrxrcE5wJ54U0ox9FHmvk2JMDHeyi2TNAhvgFkC9MEfsgsk9aJ2ERm7gZJa6UxSF+BbwGb8I51iUSr97Kp7XQi+EI7b+xt2MVmj6tL2F2RRhkBSo6QjQtIoObdvjrEm4Ca8ZXRqMfTA0+F4kaQvJs47A384thJrB5bUF3dj3wVODwmfq3HPqNWbrpZgZiuAhXiS57LEtHDLPifZQ1BN/eyqew0gqaekNmGYpE7yhqIDgeeitu5alFVSb0mdc4wfgufTINZsl/zWYBheuoEdteNvSGoJf681s3gG9wk8wXEobWOYxyRtwS3kRqA3XnbbAgw1s2RMnJZ+Ht4ncCrwuqT5uEvWGw8bGoBJUU94uGkfxOPt08xsNYCZzZP0MnCmpJPM7GlqE5fiRu1WSQPwPv8T8B6D5cBPcpxTFf10gL0eBNwo6Rm8m3IdcBDebdsDv88uhJqW9Xt4juwp/BuJjXhpfTCwN/AwsTbjpEfQhCeCzsUzxOCCR2MjUzAyDy8FjcaTTH3wXvUj4/XLrPShHDMI7/JbiucDJuBuz8O4ZZ4BIOkwvOyzLYyvSCw3ORxvSiFfRRF4PhZ3P0/AZW3E++BPzPARTFn00xH2Gn/B3IOHlyPwZqGzgPW4B3aUmS2tcVkX4QaqEe9/GY8bsmfwZ3lIvJpR/wy5jjrqqP/HJHXUUQf8H4f+eB2A0TIGAAAAAElFTkSuQmCC\",\n      \"text/latex\": [\n       \"$\\\\displaystyle 1.998 x^{3} - 0.99 x^{2} + 3 x + 5$\"\n      ],\n      \"text/plain\": [\n       \"       3         2          \\n\",\n       \"1.998*x  - 0.99*x  + 3*x + 5\"\n      ]\n     },\n     \"execution_count\": 18,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"f2 = 0.074 * (3*x)**3 - 0.11 * (3*x)**2 + (3*x) + 5\\n\",\n    \"f2\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 19,\n   \"metadata\": {\n    \"id\": \"lxP9HsWR00Rp\",\n    \"outputId\": \"a2bedd26-c5fb-4ac9-ff48-f79d350db34e\"\n   },\n   \"outputs\": [\n    {\n     \"data\": {\n      \"image/png\": \"\",\n      \"text/plain\": [\n       \"<Figure size 640x480 with 1 Axes>\"\n      ]\n     },\n     \"metadata\": {},\n     \"output_type\": \"display_data\"\n    },\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"MSE = 140.71365866666665\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"print_points_ands_function2(f2)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {\n    \"id\": \"HRr54Gc700Rp\"\n   },\n   \"outputs\": [],\n   \"source\": []\n  }\n ],\n \"metadata\": {\n  \"colab\": {\n   \"name\": \"5.4 Преобразования функций Растяжения и сжатия - Практика.ipynb\",\n   \"provenance\": []\n  },\n  \"kernelspec\": {\n   \"display_name\": \"Python 3 (ipykernel)\",\n   \"language\": \"python\",\n   \"name\": \"python3\"\n  },\n  \"language_info\": {\n   \"codemirror_mode\": {\n    \"name\": \"ipython\",\n    \"version\": 3\n   },\n   \"file_extension\": \".py\",\n   \"mimetype\": \"text/x-python\",\n   \"name\": \"python\",\n   \"nbconvert_exporter\": \"python\",\n   \"pygments_lexer\": \"ipython3\",\n   \"version\": \"3.12.1\"\n  }\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 4\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/SymPyLearn/3.3.ipynb b/SymPyLearn/3.3.ipynb
--- a/SymPyLearn/3.3.ipynb	(revision 5abcc0366c99590901efb046fd233a0e6912b4c8)
+++ b/SymPyLearn/3.3.ipynb	(date 1710344249536)
@@ -257,7 +257,7 @@
    "name": "python",
    "nbconvert_exporter": "python",
    "pygments_lexer": "ipython3",
-   "version": "3.12.1"
+   "version": "3.12.2"
   }
  },
  "nbformat": 4,
Index: SymPyLearn/1.3.ipynb
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\n \"cells\": [\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {\n    \"id\": \"gh5MFNIuwemF\"\n   },\n   \"source\": [\n    \"## Практика. Дополнительный функционал SymPy для исследования функций.\\n\",\n    \"\\n\",\n    \"В качестве практики найдите нули  и промежутки знакопостоянства функций, с которыми вы работали в рамках предыдущей практики:\\n\",\n    \"1. $f(x)=e^x$\\n\",\n    \"2. $f(x)=ln(x)$\\n\",\n    \"3. $f(x)=2x^2+3x-5$\\n\",\n    \"4. $f(x)=\\\\sqrt x$\\n\",\n    \"<br>\\n\",\n    \"\\n\",\n    \"Проверьте, согласуются ли найденные вами значения с поведением графика.\\n\",\n    \"\\n\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 3,\n   \"metadata\": {\n    \"id\": \"dH1cEQ2-zu_i\"\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"from sympy import *\\n\",\n    \"from sympy.plotting import plot\\n\",\n    \"from sympy.solvers.inequalities import solve_univariate_inequality\\n\",\n    \"init_printing(use_unicode=False, wrap_line=False, no_global=True)\\n\",\n    \"x=Symbol('x')\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 4,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/latex\": [\n       \"$\\\\displaystyle \\\\left[ \\\\right]$\"\n      ],\n      \"text/plain\": [\n       \"[]\"\n      ]\n     },\n     \"execution_count\": 4,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"f = exp(x)\\n\",\n    \"solve(f)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 5,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/latex\": [\n       \"$\\\\displaystyle -\\\\infty < x \\\\wedge x < \\\\infty$\"\n      ],\n      \"text/plain\": [\n       \"And(-oo < x, x < oo)\"\n      ]\n     },\n     \"execution_count\": 5,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"solve_univariate_inequality(f>0, x)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 6,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/latex\": [\n       \"$\\\\displaystyle \\\\text{False}$\"\n      ],\n      \"text/plain\": [\n       \"False\"\n      ]\n     },\n     \"execution_count\": 6,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"solve_univariate_inequality(f<0, x)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 7,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/latex\": [\n       \"$\\\\displaystyle \\\\left[ 1\\\\right]$\"\n      ],\n      \"text/plain\": [\n       \"[1]\"\n      ]\n     },\n     \"execution_count\": 7,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"f1 = ln(x)\\n\",\n    \"solve(f1)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 8,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/latex\": [\n       \"$\\\\displaystyle 1 < x \\\\wedge x < \\\\infty$\"\n      ],\n      \"text/plain\": [\n       \"And(1 < x, x < oo)\"\n      ]\n     },\n     \"execution_count\": 8,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"solve_univariate_inequality(f1>0, x)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 9,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/latex\": [\n       \"$\\\\displaystyle 0 < x \\\\wedge x < 1$\"\n      ],\n      \"text/plain\": [\n       \"And(0 < x, x < 1)\"\n      ]\n     },\n     \"execution_count\": 9,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"solve_univariate_inequality(f1<0, x)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 10,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/latex\": [\n       \"$\\\\displaystyle \\\\left[ - \\\\frac{5}{2}, \\\\  1\\\\right]$\"\n      ],\n      \"text/plain\": [\n       \"[-5/2, 1]\"\n      ]\n     },\n     \"execution_count\": 10,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"f2 = 2* x **2 + 3*x - 5\\n\",\n    \"solve(f2)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 11,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/latex\": [\n       \"$\\\\displaystyle \\\\left(-\\\\infty < x \\\\wedge x < - \\\\frac{5}{2}\\\\right) \\\\vee \\\\left(1 < x \\\\wedge x < \\\\infty\\\\right)$\"\n      ],\n      \"text/plain\": [\n       \"Or(And(-oo < x, x < -5/2), And(1 < x, x < oo))\"\n      ]\n     },\n     \"execution_count\": 11,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"solve_univariate_inequality(f2>0, x)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 12,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/latex\": [\n       \"$\\\\displaystyle - \\\\frac{5}{2} < x \\\\wedge x < 1$\"\n      ],\n      \"text/plain\": [\n       \"And(-5/2 < x, x < 1)\"\n      ]\n     },\n     \"execution_count\": 12,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"solve_univariate_inequality(f2<0, x)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 17,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/latex\": [\n       \"$\\\\displaystyle \\\\left[ 0\\\\right]$\"\n      ],\n      \"text/plain\": [\n       \"[0]\"\n      ]\n     },\n     \"execution_count\": 17,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"f3 = sqrt(x)\\n\",\n    \"solve(f3)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 16,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/latex\": [\n       \"$\\\\displaystyle 0 < x \\\\wedge x < \\\\infty$\"\n      ],\n      \"text/plain\": [\n       \"And(0 < x, x < oo)\"\n      ]\n     },\n     \"execution_count\": 16,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"solve_univariate_inequality(f3>0, x)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 18,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/latex\": [\n       \"$\\\\displaystyle \\\\text{False}$\"\n      ],\n      \"text/plain\": [\n       \"False\"\n      ]\n     },\n     \"execution_count\": 18,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"solve_univariate_inequality(f3<0, x)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": []\n  }\n ],\n \"metadata\": {\n  \"colab\": {\n   \"collapsed_sections\": [],\n   \"name\": \"practice_les-6.ipynb\",\n   \"provenance\": []\n  },\n  \"kernelspec\": {\n   \"display_name\": \"Python 3 (ipykernel)\",\n   \"language\": \"python\",\n   \"name\": \"python3\"\n  },\n  \"language_info\": {\n   \"codemirror_mode\": {\n    \"name\": \"ipython\",\n    \"version\": 3\n   },\n   \"file_extension\": \".py\",\n   \"mimetype\": \"text/x-python\",\n   \"name\": \"python\",\n   \"nbconvert_exporter\": \"python\",\n   \"pygments_lexer\": \"ipython3\",\n   \"version\": \"3.12.1\"\n  }\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 4\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/SymPyLearn/1.3.ipynb b/SymPyLearn/1.3.ipynb
--- a/SymPyLearn/1.3.ipynb	(revision 5abcc0366c99590901efb046fd233a0e6912b4c8)
+++ b/SymPyLearn/1.3.ipynb	(date 1711884385403)
@@ -343,7 +343,7 @@
    "name": "python",
    "nbconvert_exporter": "python",
    "pygments_lexer": "ipython3",
-   "version": "3.12.1"
+   "version": "3.12.2"
   }
  },
  "nbformat": 4,
Index: SymPyLearn/3.2.ipynb
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\n \"cells\": [\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 1,\n   \"metadata\": {\n    \"id\": \"RBTCIENGs9KE\"\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"from sympy import *\\n\",\n    \"from sympy.plotting import plot\\n\",\n    \"init_printing(use_unicode=False, wrap_line=False, no_global=True)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 2,\n   \"metadata\": {\n    \"id\": \"XfPKkCmws9KQ\"\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"import matplotlib.pyplot as plt\\n\",\n    \"import numpy as np\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 3,\n   \"metadata\": {\n    \"id\": \"DKZKAc95s9KW\"\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"x = Symbol('x')\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {\n    \"id\": \"Psfud4Mvs9Kb\"\n   },\n   \"source\": [\n    \"## 1. \\n\",\n    \"### Получите значение MSE меньшее 110.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 4,\n   \"metadata\": {\n    \"id\": \"4PiSwAn3s9Kc\"\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"import matplotlib.pyplot as plt\\n\",\n    \"import numpy as np\\n\",\n    \"\\n\",\n    \"def print_points_ands_function1(sympy_function):\\n\",\n    \"    def function(x_): return float(sympy_function.subs(x, x_))\\n\",\n    \"    \\n\",\n    \"    points_X = np.array([-3, -2, -1, 1, 2, 3])\\n\",\n    \"    points_Y = np.array([60, 30, 19, -16, -37, -23])\\n\",\n    \"    plt.xlim(-15, 15)\\n\",\n    \"    plt.ylim(-40, 80)\\n\",\n    \"    \\n\",\n    \"    plt.scatter(points_X, points_Y, c='r')\\n\",\n    \"    x_range = np.linspace(plt.xlim()[0], plt.xlim()[1], num=100)\\n\",\n    \"    function_Y = [function(x_) for x_ in x_range]\\n\",\n    \"    plt.plot(x_range, function_Y, 'b')\\n\",\n    \"    plt.show()\\n\",\n    \"    \\n\",\n    \"    MSE = sum([(points_Y[i] - function(points_X[i]))**2 for i in range(len(points_Y))]) / len(points_Y)\\n\",\n    \"    print(f'MSE = {MSE}')\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 51,\n   \"metadata\": {\n    \"colab\": {\n     \"base_uri\": \"https://localhost:8080/\",\n     \"height\": 34\n    },\n    \"id\": \"F5zwYkKks9Ki\",\n    \"outputId\": \"bc54aa7a-59c8-4601-d87b-34c2d4368628\"\n   },\n   \"outputs\": [\n    {\n     \"data\": {\n      \"image/png\": \"iVBORw0KGgoAAAANSUhEUgAAAF0AAAAQCAYAAAB0t3NxAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjguMywgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/H5lhTAAAACXBIWXMAABJ0AAASdAHeZh94AAAEV0lEQVR4nO3YW6ydRRUH8F8RQkj0waiEF2IA5RaDR1G04VaBSgTDLfXFQGpCiyESK2C5BV3+IaIFqVR9ANFYRF60gpFLuGoCCsEojcFAChTLTUAuQjQIqD08zLfr191z6Nn7hNMX/snO7LmsNfOtWfNfa2be5OSktzG32H6qxiSH4zTMx7vxAu7Hqqq6ae6WR5JFOBQT+DDehWuq6sQRdJyIq7vq0qr60QiyR2MZ9sV78DT+hJVVdc9M9fSx3RSTXIzb8TH8GpfiRrwPC8aZZJY4X3OACTw1qnCSXfED/GsM2RW4AR/FzViF+3Asft9t5sjYzNOTLMVyXIVTqur1of4dxplkljgdT+IRzeN/O1PBJPPwE+2kXouvjiC7Szf+WexXVX/v9X0Kv8EF+NlMdQ6wyehJdsQ38bgpDA5V9Z9RJ5gtqmqTkZOMKv5lHKad0MNGlH2/xgT39g0+WFOSf2qnfzMkuRULsaiqftlrHzjA4j69LOyUXIuNSY5OcnaSZUnmj7jgbY4k++DbWhy6cwwVD+N1HJDkvUO6D9Fiy+1TyC3HRlyY5B299u9gMX7Yp5ePd+WrWIsPDU10p7Z7z43xAXOKJNtrgfNxnDeOjqp6McnZWIkHkvxKo6k9cAxuwxenkPtzkqs1A5+E1UnOwxn4OU7te/rOXbkckzhY2839cCsOwS/G+YBtgK/jI/hCVf17XCVVdRlO0Gh4Kc7B5/AEVg/TTg9f05y3kpym0fYtOKmqNvY9fbAB/8UxVbWhq9+f5Hisw6FJ5k+XKiXZoHHhTDFS6jcTJPmE5t2XjpvS9XSdhYvwPS0DegZ741u4JslEVZ01LFdVTyS5TNuk7+NunDCIk32jv9SVa3sGHyh5JcktOBkHYLqPWa/t8EzxtxHGbhUdrfwUD2neNhtdC7AC11XVGb2u+zonfAhnJrm8qh6dQkWfhk+uqlcGlb7R13XlS9Os4x9dudN0C62qw6frmyO8E3t2/1+dJtu5MsmVWoD9ypvo+mxXbpGidk74Bxyv0dhmRk/yeS1wPoNdtMvVqYP+PqffoXH5vkm2uDT5f2D965ssdFvjNfx4mt/abszvuvrWqGfHrtwiLRxqH77LHIXV+IsWD9dhSZK9BmM2eXpVPZbkei0yL8N3e4o+jSO1U3DzVha7zdAFzSVT9SX5huaVVw0/AyTZAztgfe8ucpd2Ez4lyRVV9VRv/GdwoEald/faD8Ia7TJ3ZFU9l+R8LQFZgePY8u3lS93CVnZvDmuxWzf4f1hSVS+PYojZIslx3fy0owrzk6zu/j9fVTO+aU6DO7QEYDds6NrWaHn4EXgwyXUaXeyjUc88nFNVL3TrnNCeDF7Gwqp6GqpqTZI/4tgkB1fVXZvRSFU9if21SP1BzeMX4Hoc2L9hzSEmtJx3sXbaYPde26K3YtKq2oijtGeIBzT+PhOfxE2aJ6+CJB/QGGCya18/pO7crrwE5r39tDv3eAMOZZRxURbOgQAAAABJRU5ErkJggg==\",\n      \"text/latex\": [\n       \"$\\\\displaystyle 6 - 14.8 x$\"\n      ],\n      \"text/plain\": [\n       \"6 - 14.8*x\"\n      ]\n     },\n     \"execution_count\": 51,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"x = Symbol('x')\\n\",\n    \"f1 = - 14.8 * x +6\\n\",\n    \"f1\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 52,\n   \"metadata\": {\n    \"colab\": {\n     \"base_uri\": \"https://localhost:8080/\",\n     \"height\": 286\n    },\n    \"id\": \"PheCiBKis9Kp\",\n    \"outputId\": \"85be0a55-ffef-46a7-8669-22cf069d925f\"\n   },\n   \"outputs\": [\n    {\n     \"data\": {\n      \"image/png\": \"\",\n      \"text/plain\": [\n       \"<Figure size 640x480 with 1 Axes>\"\n      ]\n     },\n     \"metadata\": {},\n     \"output_type\": \"display_data\"\n    },\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"MSE = 99.22000000000001\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"print_points_ands_function1(f1)\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {\n    \"id\": \"ODx0RXWIs9Ku\"\n   },\n   \"source\": [\n    \"## 2. \\n\",\n    \"### Получите значение MSE меньшее 150.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 53,\n   \"metadata\": {\n    \"id\": \"5JHvOpfos9Kv\"\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"def print_points_ands_function2(sympy_function):\\n\",\n    \"    def function(x_): return float(sympy_function.subs(x, x_))\\n\",\n    \"    \\n\",\n    \"    points_X = np.array([-3, -2, -1, 1, 2, 3])\\n\",\n    \"    points_Y = np.array([-55, -40, 7, 5, 38, 53])\\n\",\n    \"    plt.xlim(-5, 25)\\n\",\n    \"    plt.ylim(-70, 70)\\n\",\n    \"    \\n\",\n    \"    plt.scatter(points_X, points_Y, c='r')\\n\",\n    \"    x_range = np.linspace(plt.xlim()[0], plt.xlim()[1], num=100)\\n\",\n    \"    function_Y = [function(x_) for x_ in x_range]\\n\",\n    \"    plt.plot(x_range, function_Y, 'b')\\n\",\n    \"    plt.show()\\n\",\n    \"    \\n\",\n    \"    MSE = sum([(points_Y[i] - function(points_X[i]))**2 for i in range(len(points_Y))]) / len(points_Y)\\n\",\n    \"    print(f'MSE = {MSE}')\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 81,\n   \"metadata\": {\n    \"colab\": {\n     \"base_uri\": \"https://localhost:8080/\",\n     \"height\": 34\n    },\n    \"id\": \"OC72S9a4s9K0\",\n    \"outputId\": \"13389dc3-1bf4-48f4-cd75-0be0fda09229\"\n   },\n   \"outputs\": [\n    {\n     \"data\": {\n      \"image/png\": \"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\",\n      \"text/latex\": [\n       \"$\\\\displaystyle 2443 x + 2 \\\\left(x + 20\\\\right)^{3} - 121 \\\\left(x + 20\\\\right)^{2} + 32405$\"\n      ],\n      \"text/plain\": [\n       \"                   3               2        \\n\",\n       \"2443*x + 2*(x + 20)  - 121*(x + 20)  + 32405\"\n      ]\n     },\n     \"execution_count\": 81,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"f2 = 2 * (x+20)**3 - 121 * (x+20)**2 + 2443 * (x+20) - 16455\\n\",\n    \"f2\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 82,\n   \"metadata\": {\n    \"colab\": {\n     \"base_uri\": \"https://localhost:8080/\",\n     \"height\": 282\n    },\n    \"id\": \"rlifk15Ys9K4\",\n    \"outputId\": \"a49c7024-564a-44a9-86a5-825b9896b427\"\n   },\n   \"outputs\": [\n    {\n     \"data\": {\n      \"image/png\": \"\",\n      \"text/plain\": [\n       \"<Figure size 640x480 with 1 Axes>\"\n      ]\n     },\n     \"metadata\": {},\n     \"output_type\": \"display_data\"\n    },\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"MSE = 141.0\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"print_points_ands_function2(f2)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": []\n  }\n ],\n \"metadata\": {\n  \"colab\": {\n   \"name\": \"5.3 Преобразования функций Сдвиги вправо и влево - Практика.ipynb\",\n   \"provenance\": []\n  },\n  \"kernelspec\": {\n   \"display_name\": \"Python 3 (ipykernel)\",\n   \"language\": \"python\",\n   \"name\": \"python3\"\n  },\n  \"language_info\": {\n   \"codemirror_mode\": {\n    \"name\": \"ipython\",\n    \"version\": 3\n   },\n   \"file_extension\": \".py\",\n   \"mimetype\": \"text/x-python\",\n   \"name\": \"python\",\n   \"nbconvert_exporter\": \"python\",\n   \"pygments_lexer\": \"ipython3\",\n   \"version\": \"3.12.1\"\n  }\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 4\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/SymPyLearn/3.2.ipynb b/SymPyLearn/3.2.ipynb
--- a/SymPyLearn/3.2.ipynb	(revision 5abcc0366c99590901efb046fd233a0e6912b4c8)
+++ b/SymPyLearn/3.2.ipynb	(date 1710344249452)
@@ -273,7 +273,7 @@
    "name": "python",
    "nbconvert_exporter": "python",
    "pygments_lexer": "ipython3",
-   "version": "3.12.1"
+   "version": "3.12.2"
   }
  },
  "nbformat": 4,
